// Generated by CoffeeScript 1.12.7
(function() {
  gui.methods = {};

  gui.methods.typedTestButton = function(rest, text, css, type) {
    return [
      {
        text: text,
        css: css,
        action: function(event, form_selector, closeFnc) {
          var fields;
          fields = gui.forms.read(form_selector);
          gui.doLog("Fields: ", fields);
          rest.test(type, fields, (function(data) {
            var kind;
            if (data === 'ok') {
              text = gettext("Test passed successfully");
              kind = 'success';
            } else {
              text = gettext("Test failed:") + (" " + data + "</b>");
              kind = 'danger';
            }
            gui.notify(text, kind);
          }), gui.failRequestModalFnc(gettext("Test error")));
        }
      }
    ];
  };

  gui.methods.typedEdit = function(parent, modalTitle, modalErrorMsg, options) {
    options = options || {};
    return function(value, event, table, refreshFnc) {
      gui.tools.blockUI();
      parent.rest.gui(value.type, (function(guiDefinition) {
        var buttons, tabs;
        if (options.testButton) {
          buttons = gui.methods.typedTestButton(parent.rest, options.testButton.text, options.testButton.css, value.type);
        }
        tabs = (options.guiProcessor ? options.guiProcessor(guiDefinition) : guiDefinition);
        parent.rest.item(value.id, function(item) {
          gui.tools.unblockUI();
          gui.forms.launchModal({
            title: modalTitle + " <b>" + value.name + "</b>",
            fields: tabs,
            item: item,
            preprocessor: options.preprocessor,
            buttons: buttons,
            success: function(form_selector, closeFnc) {
              var fields;
              fields = gui.forms.read(form_selector);
              fields.data_type = value.type;
              fields = (options.fieldsProcessor ? options.fieldsProcessor(fields) : fields);
              parent.rest.save(fields, (function(data) {
                closeFnc();
                refreshFnc();
                gui.notify(gettext("Edition successfully done"), "success");
              }), gui.failRequestModalFnc(modalErrorMsg, true));
            }
          });
        });
      }), gui.failRequestModalFnc(modalErrorMsg, true));
    };
  };

  gui.methods.typedShow = function(parent, value, placeholder, modalErrorMsg, options) {
    options = options || {};
    parent.rest.gui(value.type, (function(guiDefinition) {
      var formId;
      formId = gui.genRamdonId('ovw-');
      parent.rest.item(value.id, function(item) {
        var data, flds, html;
        gui.doLog("Item", item, "Gui", guiDefinition);
        data = [];
        flds = gui.forms.fromFields(guiDefinition, item, true);
        gui.doLog(flds);
        html = api.templates.evaluate("tmpl_comp_overview_record", {
          id: formId,
          legend: gettext('Overview'),
          fields: flds.html
        });
        $(placeholder).html(html);
        flds.init('#' + formId);
        return gui.tools.applyCustoms('#' + formId);
      });
    }), gui.failRequestModalFnc(modalErrorMsg, true));
  };

  gui.methods.typedNew = function(parent, modalTitle, modalErrorMsg, options) {
    options = options || {};
    return function(type, table, refreshFnc) {
      gui.tools.blockUI();
      parent.rest.gui(type, (function(guiDefinition) {
        var buttons, tabs, title;
        gui.tools.unblockUI();
        if (options.testButton) {
          buttons = gui.methods.typedTestButton(parent.rest, options.testButton.text, options.testButton.css, type);
        }
        tabs = (options.guiProcessor ? options.guiProcessor(guiDefinition) : guiDefinition);
        title = modalTitle;
        if (parent.types[type] != null) {
          title += " " + gettext("of type") + " <b>" + parent.types[type].name + "</b>";
        }
        gui.forms.launchModal({
          title: title,
          fields: tabs,
          item: null,
          preprocessor: options.preprocessor,
          buttons: buttons,
          success: function(form_selector, closeFnc) {
            var fields;
            fields = gui.forms.read(form_selector);
            if (parent.types[type] != null) {
              fields.data_type = type;
            }
            fields = (options.fieldsProcessor ? options.fieldsProcessor(fields) : fields);
            parent.rest.create(fields, (function(data) {
              closeFnc();
              refreshFnc();
              gui.notify(gettext("Creation successfully done"), "success");
            }), gui.failRequestModalFnc(modalErrorMsg, true));
          }
        });
      }), gui.failRequestModalFnc(modalErrorMsg, true));
    };
  };

  gui.methods.del = function(parent, modalTitle, modalErrorMsg) {
    return function(values, type, table, refreshFnc) {
      var content, count, deletedFnc, modalId, msgs, names, value;
      names = ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = values.length; i < len; i++) {
          value = values[i];
          results.push(value.name || value.friendly_name);
        }
        return results;
      })()).join(', ');
      content = gettext("Are you sure do you want to delete ") + values.length + ' ' + gettext('items:') + " <b>" + names + "</b>";
      modalId = gui.launchModal(modalTitle, content, {
        actionButton: "<button type=\"button\" class=\"btn btn-danger button-accept\">" + gettext("Delete") + "</button>"
      });
      msgs = [];
      count = values.length;
      deletedFnc = function(name, errorMsg) {
        count -= 1;
        if (errorMsg != null) {
          msgs.push(gettext("Error deleting") + " <b>" + name + '</b>: <span class="text-danger">' + errorMsg + '</span>');
        } else {
          msgs.push(gettext("Successfully deleted") + " <b>" + name + "</b>");
        }
        if (count === 0) {
          gui.tools.unblockUI();
          refreshFnc();
          return gui.launchModal(gettext('Deletion results'), '<ul><li>' + msgs.join('</li><li>') + '</li></ul>', {
            actionButton: " ",
            closeButton: '<button type="button" class="btn btn-default" data-dismiss="modal">Ok</button>'
          });
        }
      };
      $(modalId + " .button-accept").click(function() {
        var fn, i, len;
        $(modalId).modal("hide");
        gui.tools.blockUI();
        fn = function(value) {
          var name;
          name = value.name || value.friendly_name;
          return parent.rest.del(value.id, (function() {
            deletedFnc(name);
          }), function(jqXHR, textStatus, errorThrown) {
            return deletedFnc(name, jqXHR.responseText);
          });
        };
        for (i = 0, len = values.length; i < len; i++) {
          value = values[i];
          fn(value);
        }
      });
    };
  };

}).call(this);
