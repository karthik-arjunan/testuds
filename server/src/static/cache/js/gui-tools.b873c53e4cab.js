// Generated by CoffeeScript 1.12.7
(function() {
  "use strict";
  var $, gui, ref;

  this.gui = (ref = this.gui) != null ? ref : {};

  $ = jQuery;

  gui = this.gui;

  gui.tools = {
    blockUI: function(message) {
      message = message || "<h1><span class=\"fa fa-spinner fa-spin\"></span> " + gettext("Just a moment...") + "</h1>";
      $.blockUI({
        message: message
      });
    },
    unblockUI: function() {
      $.unblockUI();
      $(".DTTT_collection_background").remove();
    },
    fix3dButtons: function(selector) {
      selector = selector || "";
      selector += " .btn3d";
      $.each($(selector), function(index, value) {
        var $this, clkEvents;
        $this = $(this);
        clkEvents = [];
        try {
          $.each($._data(value, "events").click, function(index, fnc) {
            clkEvents.push(fnc);
          });
        } catch (error) {
          return;
        }
        $this.unbind("click");
        $this.mousedown(function(event) {
          $("body").mouseup(function(e) {
            var dist_square, x, y;
            $(this).unbind("mouseup");
            x = event.pageX - e.pageX;
            y = event.pageY - e.pageY;
            dist_square = x * x + y * y;
            if (dist_square < 16 * 16) {
              $.each(clkEvents, function(index, fnc) {
                $this.click(fnc.handler);
              });
              $this.click();
              $this.unbind("click");
            }
          });
        });
      });
    },
    applyCustoms: function(selector) {
      $.each($(selector + " input:checkbox"), function(index, tspn) {
        var $tspn;
        $tspn = $(tspn);
        if ($tspn.attr("basic") !== "true") {
          return $tspn.bootstrapSwitch();
        }
      });
      $.each($(selector + " input[type=date]:not([readonly])"), function(index, tspn) {
        var $tspn, options;
        $tspn = $(tspn);
        if ($tspn.val() === '2000-01-01') {
          $tspn.val(api.tools.strftime('%Y-01-01'));
        }
        if ($tspn.val() === '2099-12-31') {
          $tspn.val(api.tools.strftime('%Y-12-31'));
        }
        $tspn.attr("type", "text");
        options = {
          format: 'yyyy-mm-dd',
          container: 'html'
        };
        if ($tspn.attr('clear') === "true") {
          options.clearBtn = true;
        }
        return $tspn.parent().datepicker(options);
      });
      $.each($(selector + " input[type=udstime]:not([readonly])"), function(index, tspn) {
        var $tspn, opts;
        $tspn = $(tspn);
        opts = {
          showMeridian: false,
          defaultTime: false
        };
        $tspn.attr("type", "text");
        return $tspn.timepicker(opts);
      });
      $.each($(selector + " .selectpicker"), function(index, tspn) {
        var $tspn, length;
        $tspn = $(tspn);
        length = $tspn.children('option').length;
        if (length >= 6) {
          $tspn.attr("data-live-search", "true");
        }
        return $tspn.selectpicker();
      });
      $.each($(selector + " input[type=numeric]:not([readonly])"), function(index, tspn) {
        var $tspn, maxVal, minVal, postfix;
        $tspn = $(tspn);
        postfix = $tspn.attr("data-postfix");
        if (postfix === void 0) {
          postfix = '';
        }
        minVal = parseInt($tspn.attr("data-minval"));
        maxVal = parseInt($tspn.attr("data-maxval"));
        if (minVal === 987654321) {
          minVal = -999999;
        }
        if (maxVal === 987654321) {
          maxVal = 999999;
        }
        gui.doLog(minVal);
        $tspn.attr("type", "text");
        return $tspn.TouchSpin({
          verticalbuttons: true,
          verticalupclass: 'glyphicon glyphicon-plus',
          verticaldownclass: 'glyphicon glyphicon-minus',
          min: minVal,
          max: maxVal,
          postfix: postfix,
          decimals: 0
        });
      });
      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)) {
        $(selector + " .selectpicker").selectpicker("mobile");
      }
      $(selector + " [data-toggle=\"tooltip\"]").tooltip({
        delay: {
          show: 1000,
          hide: 100
        },
        placement: "auto right"
      });
      gui.tools.fix3dButtons(selector);
    },
    renderDate: function(format) {
      return function(data, type, full) {
        var val;
        if (data === "None" || data === null) {
          data = 7226578800;
          val = gettext('Never');
        } else {
          val = api.tools.strftime(format, new Date(data * 1000));
        }
        return "<span data-date=\"" + data + "\">" + val + "</span>";
      };
    },
    renderLogLovel: function() {
      var levels;
      levels = {
        10000: "OTHER",
        20000: "DEBUG",
        30000: "INFO",
        40000: "WARN",
        50000: "ERROR",
        60000: "FATAL"
      };
      return function(data, type, full) {
        return levels[data] || "OTHER";
      };
    },
    iconAndText: function(icon, text) {
      return '<span class="fa ' + icon + '"> </span> <span class="label-tbl-button">' + text + '</span>';
    }
  };

  return;

}).call(this);
