// Generated by CoffeeScript 1.12.7
(function() {
  gui.permissions = function(val, rest, tbl, refreshFnc) {
    var addModal, baseId, delModal, fillSelect;
    baseId = gui.genRamdonId('perms-');
    fillSelect = function(perms, forUser) {
      var $select, i, item, len1, padRight, results;
      $select = $('#' + baseId + (forUser ? '_user_select' : '_group_select'));
      $select.empty();
      padRight = function(str, len) {
        var numPads;
        numPads = len - str.length;
        if (numPads > 0) {
          return str + Array(numPads + 1).join('&nbsp;');
        } else {
          return str;
        }
      };
      results = [];
      for (i = 0, len1 = perms.length; i < len1; i++) {
        item = perms[i];
        if ((forUser === true && item.type === 'user') || (forUser === false && item.type === 'group')) {
          results.push($select.append('<option value="' + item.id + '">' + padRight(item.auth_name + '\\' + item.entity_name, 28) + '&nbsp;| ' + item.perm_name));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    addModal = function(forUser) {
      var items, label;
      if (forUser) {
        label = gettext('User');
        items = 'users';
      } else {
        label = gettext('Group');
        items = 'groups';
      }
      return api.templates.get("permissions_add", function(tmpl) {
        return api.authenticators.overview(function(data) {
          var modalId;
          modalId = gui.launchModal(gettext("Add") + " " + label, api.templates.evaluate(tmpl, {
            auths: data,
            label: label
          }));
          $(modalId + " #id_auth_select").on("change", function(event) {
            var auth;
            auth = $(modalId + " #id_auth_select").val();
            api.authenticators.detail(auth, items).overview(function(data) {
              var $select;
              $select = $(modalId + " #id_item_select");
              $select.empty();
              $.each(data, function(undefined_, value) {
                $select.append("<option value=\"" + value.id + "\">" + value.name + "</option>");
              });
              if ($select.hasClass("selectpicker")) {
                $select.selectpicker("refresh");
              }
            });
          });
          $(modalId + " .button-accept").on("click", function(event) {
            var auth, item, perm;
            auth = $(modalId + " #id_auth_select").val();
            item = $(modalId + " #id_item_select").val();
            perm = $(modalId + " #id_perm_select").val();
            if (auth === -1 || item === -1) {
              gui.notify(gettext("You must provide authenticator and") + " " + label, "danger");
            } else {
              rest.addPermission(val.id, items, item, perm, (function(perms) {
                $(modalId).modal("hide");
                return fillSelect(perms, forUser);
              }));
            }
          });
          gui.tools.applyCustoms(modalId);
        });
      });
    };
    delModal = function(forUser, selectedItems) {
      var content, items, label, modalId, toDel, v;
      if (forUser) {
        label = gettext('User');
        items = 'users';
      } else {
        label = gettext('Group');
        items = 'groups';
      }
      content = '<p>' + gettext("Confirm revocation of following permissions: <br/>");
      content += '<ul style=\'font-family: "Courier New"\'><li>' + ((function() {
        var i, len1, results;
        results = [];
        for (i = 0, len1 = selectedItems.length; i < len1; i++) {
          v = selectedItems[i];
          results.push($(v).text());
        }
        return results;
      })()).join('</li><li>') + '</li></ul>';
      modalId = gui.launchModal(gettext("Remove ") + label + " permission", content, {
        actionButton: "<button type=\"button\" class=\"btn btn-primary button-revoke\">" + gettext("Revoke") + "</button>"
      });
      toDel = (function() {
        var i, len1, results;
        results = [];
        for (i = 0, len1 = selectedItems.length; i < len1; i++) {
          v = selectedItems[i];
          results.push($(v).val());
        }
        return results;
      })();
      gui.doLog(modalId);
      return $(modalId + ' .button-revoke').on('click', function() {
        return rest.revokePermissions(toDel, (function(perms) {
          var i, len1, results;
          $(modalId).modal("hide");
          results = [];
          for (i = 0, len1 = selectedItems.length; i < len1; i++) {
            v = selectedItems[i];
            results.push($(v).remove());
          }
          return results;
        }));
      });
    };
    return api.templates.get("permissions", function(tmpl) {
      return rest.getPermissions(val.id, function(perms) {
        var content, modalId;
        content = api.templates.evaluate(tmpl, {
          id: baseId,
          perms: perms
        });
        modalId = gui.launchModal(gettext("Permissions for") + " " + val.name, content, {
          actionButton: " ",
          closeButton: '<button type="button" class="btn btn-default" data-dismiss="modal">Ok</button>'
        });
        fillSelect(perms, true);
        fillSelect(perms, false);
        $('#' + baseId + '_user_del').on('click', function() {
          var $select, selected;
          $select = $('#' + baseId + '_user_select');
          selected = $select.find(":selected");
          if (selected.length === 0) {
            return;
          }
          return delModal(true, selected);
        });
        $('#' + baseId + '_user_add').on('click', function() {
          return addModal(true);
        });
        $('#' + baseId + '_group_del').on('click', function() {
          var $select, selected;
          $select = $('#' + baseId + '_group_select');
          selected = $select.find(":selected");
          if (selected.length === 0) {
            return;
          }
          return delModal(false, selected);
        });
        $('#' + baseId + '_group_add').on('click', function() {
          return addModal(false);
        });
        return gui.tools.applyCustoms(modalId);
      });
    });
  };

}).call(this);
