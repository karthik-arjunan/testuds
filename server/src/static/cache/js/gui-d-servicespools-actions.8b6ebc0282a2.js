// Generated by CoffeeScript 1.12.7
(function() {
  var actionSelectChangeFnc, readParamsFromInputs;

  readParamsFromInputs = function(modalId) {
    var a, l, len, ref, v;
    a = {};
    ref = $(modalId + ' .action_parameters');
    for (l = 0, len = ref.length; l < len; l++) {
      v = ref[l];
      a[$(v).attr('name')] = $(v).val();
    }
    return a;
  };

  actionSelectChangeFnc = function(modalId, actionsList) {
    var action, html, i, j, l, len, len1, m, ref;
    gui.doLog("onChange");
    action = $(modalId + " #id_action_select").val();
    if (action === '-1') {
      return;
    }
    $(modalId + " #parameters").empty();
    for (l = 0, len = actionsList.length; l < len; l++) {
      i = actionsList[l];
      if (i['id'] === action) {
        if (i['params'].length > 0) {
          html = '';
          ref = i['params'];
          for (m = 0, len1 = ref.length; m < len1; m++) {
            j = ref[m];
            html += '<div class="form-group"><label for="fld_' + j['name'] + '" class="col-sm-3 control-label">' + j['description'] + '</label><div class="col-sm-9"><input type="' + j['type'] + '" class="action_parameters" name="' + j['name'] + '" value="' + j['default'] + '"></div></div>';
          }
          $(modalId + " #parameters").html(html);
          gui.tools.applyCustoms(modalId);
        }
      }
    }
  };

  gui.servicesPools.actionsCalendars = function(servPool, info) {
    var actionsApi, actionsCalendars, actionsCalendarsTable;
    actionsApi = api.servicesPools.detail(servPool.id, "actions", {
      permission: servPool.permission
    });
    actionsCalendars = new GuiElement(actionsApi, "actions");
    actionsCalendarsTable = actionsCalendars.table({
      doNotLoadData: true,
      icon: 'assigned',
      container: "actions-placeholder",
      rowSelect: "multi",
      buttons: [
        "new", "edit", {
          text: gettext("Launch Now"),
          css: "disabled",
          disabled: true,
          click: function(val, value, btn, tbl, refreshFnc) {
            if (val.length !== 1) {
              return;
            }
            gui.doLog(val, val[0]);
            gui.forms.confirmModal(gettext("Execute action"), gettext("Launch action execution right now?"), {
              onYes: function() {
                return actionsApi.invoke(val[0].id + "/execute", function() {
                  refreshFnc();
                });
              }
            });
          },
          select: function(vals, self, btn, tbl, refreshFnc) {
            var val;
            if (vals.length !== 1) {
              $(btn).addClass("disabled");
              $(btn).prop('disabled', true);
              return;
            }
            val = vals[0];
            $(btn).removeClass("disabled").prop('disabled', false);
          }
        }, "delete", "xls"
      ],
      onCheck: function(action, selected) {
        var l, len, v;
        if (action === 'edit') {
          return true;
        }
        for (l = 0, len = selected.length; l < len; l++) {
          v = selected[l];
          if (v.id === -1) {
            return false;
          }
        }
        return true;
      },
      onData: function(data) {
        return $.each(data, function(index, value) {
          var k;
          value.params = ((function() {
            var l, len, ref, results;
            ref = Object.keys(value.params);
            results = [];
            for (l = 0, len = ref.length; l < len; l++) {
              k = ref[l];
              results.push(k + "=" + value.params[k]);
            }
            return results;
          })()).toString();
          value.atStart = value.atStart ? gettext('Beginning') : gettext('Ending');
          return value.calendar = gui.fastLink(value.calendar, value.calendarId, 'gui.servicesPools.fastLink', 'goCalendarLink');
        });
      },
      onNew: function(value, table, refreshFnc) {
        api.templates.get("pool_add_action", function(tmpl) {
          api.calendars.overview(function(data) {
            api.servicesPools.actionsList(servPool.id, function(actionsList) {
              var modalId;
              modalId = gui.launchModal(gettext("Add scheduled action"), api.templates.evaluate(tmpl, {
                calendars: data,
                calendarId: '',
                actionsList: actionsList,
                action: '',
                eventsOffset: 0,
                atStart: true
              }));
              $(modalId + " .button-accept").on("click", function(event) {
                var action, atStart, calendar, offset;
                offset = $(modalId + " #id_offset").val();
                calendar = $(modalId + " #id_calendar_select").val();
                action = $(modalId + " #id_action_select").val();
                atStart = $(modalId + " #atStart_field").is(":checked");
                actionsCalendars.rest.create({
                  calendarId: calendar,
                  action: action,
                  eventsOffset: offset,
                  atStart: atStart,
                  action: action,
                  params: readParamsFromInputs(modalId)
                }, function(data) {
                  $(modalId).modal("hide");
                  refreshFnc();
                });
              });
              $(modalId + ' #id_action_select').on("change", function(event) {
                return actionSelectChangeFnc(modalId, actionsList);
              });
              gui.tools.applyCustoms(modalId);
            });
          });
        });
      },
      onEdit: function(value, event, table, refreshFnc) {
        return api.templates.get("pool_add_action", function(tmpl) {
          api.servicesPools.actionsList(servPool.id, function(actionsList) {
            actionsCalendars.rest.item(value.id, function(item) {
              var i, j, k, l, len, len1, len2, m, n, ref, ref1;
              for (l = 0, len = actionsList.length; l < len; l++) {
                i = actionsList[l];
                if (i['id'] === item.action) {
                  gui.doLog("Found ", i);
                  ref = Object.keys(item.params);
                  for (m = 0, len1 = ref.length; m < len1; m++) {
                    j = ref[m];
                    gui.doLog("Testing ", j);
                    ref1 = i['params'];
                    for (n = 0, len2 = ref1.length; n < len2; n++) {
                      k = ref1[n];
                      gui.doLog('Checking ', k);
                      if (k['name'] === j) {
                        gui.doLog('Setting value');
                        k['default'] = item.params[j];
                      }
                    }
                  }
                }
              }
              api.calendars.overview(function(data) {
                var modalId;
                gui.doLog("Item: ", item);
                modalId = gui.launchModal(gettext("Edit access calendar"), api.templates.evaluate(tmpl, {
                  calendars: data,
                  calendarId: item.calendarId,
                  actionsList: actionsList,
                  action: item.action,
                  eventsOffset: item.eventsOffset,
                  atStart: item.atStart
                }));
                $(modalId + " .button-accept").on("click", function(event) {
                  var action, atStart, calendar, offset;
                  offset = $(modalId + " #id_offset").val();
                  calendar = $(modalId + " #id_calendar_select").val();
                  action = $(modalId + " #id_action_select").val();
                  atStart = $(modalId + " #atStart_field").is(":checked");
                  actionsCalendars.rest.save({
                    id: item.id,
                    calendarId: calendar,
                    action: action,
                    eventsOffset: offset,
                    atStart: atStart,
                    action: action,
                    params: readParamsFromInputs(modalId)
                  }, function(data) {
                    $(modalId).modal("hide");
                    refreshFnc();
                  });
                });
                $(modalId + ' #id_action_select').on("change", function(event) {
                  return actionSelectChangeFnc(modalId, actionsList);
                });
                actionSelectChangeFnc(modalId, actionsList);
                gui.tools.applyCustoms(modalId);
              });
            });
          });
        });
      },
      onDelete: gui.methods.del(actionsCalendars, gettext("Remove access calendar"), gettext("Access calendar removal error"))
    });
    return [actionsCalendarsTable];
  };

}).call(this);
