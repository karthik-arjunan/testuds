// Generated by CoffeeScript 1.12.7
(function() {
  "use strict";
  var $, BasicModelRest, Cache, DetailModelRestApi, api, ref,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.api = (ref = this.api) != null ? ref : {};

  $ = jQuery;

  api = this.api;

  api.debug = false;

  api.permissions = {
    NONE: 0,
    READ: 32,
    MANAGEMENT: 64,
    ALL: 96
  };

  api.doLog = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (api.debug) {
      try {
        args.push("API");
        console.log.apply(window, args);
      } catch (error) {}
    }
  };

  api.cacheTable = {};

  api.cache = function(cacheName) {
    return new Cache(cacheName);
  };

  api.cache.clear = function(cacheName) {
    if (cacheName == null) {
      api.cacheTable = {};
    } else {
      api.cacheTable[cacheName] = {};
    }
  };

  api.url_for = function(path, type) {
    if (type == null) {
      type = 'rest';
    }
    api.doLog('Url for: ', path, ', ', type);
    switch (type) {
      case "template":
        return api.config.template_url + path;
      case "rest":
        return api.config.base_url + path;
      default:
        api.doLog('Type of url not found: ' + type);
        throw "Type of url not found: " + type;
    }
  };

  api.defaultFail = function(jqXHR, textStatus, errorThrown) {
    api.doLog(jqXHR, ", ", textStatus, ", ", errorThrown);
  };

  api.getJson = function(path, options) {
    var fail_fnc, success_fnc, url;
    options = options || {};
    success_fnc = options.success || function() {};
    fail_fnc = options.fail || api.defaultFail;
    url = api.url_for(path);
    api.doLog("Ajax GET Json for \"" + url + "\"");
    $.ajax({
      url: url,
      type: options.method || "GET",
      dataType: "json",
      success: function(data) {
        api.doLog("Success on GET \"" + url + "\".");
        success_fnc(data);
      },
      error: function(jqXHR, textStatus, errorThrown) {
        api.doLog("Error on GET \"" + url + "\". ", textStatus, ", ", errorThrown);
        fail_fnc(jqXHR, textStatus, errorThrown);
      },
      beforeSend: function(request) {
        request.setRequestHeader(api.config.auth_header, api.config.token);
      }
    });
  };

  api.putJson = function(path, data, options) {
    var fail_fnc, success_fnc, url;
    options = options || {};
    success_fnc = options.success || function() {};
    fail_fnc = options.fail || api.defaultFail;
    url = api.url_for(path);
    api.doLog("Ajax PUT Json for \"" + url + "\"");
    $.ajax({
      url: url,
      type: options.method || "PUT",
      dataType: "json",
      data: JSON.stringify(data),
      success: function(data) {
        api.doLog("Success on PUT \"" + url + "\".");
        success_fnc(data);
      },
      error: function(jqXHR, textStatus, errorThrown) {
        api.doLog("Error on PUT \"" + url + "\". ", textStatus, ", ", errorThrown);
        fail_fnc(jqXHR, textStatus, errorThrown);
      },
      beforeSend: function(request) {
        request.setRequestHeader(api.config.auth_header, api.config.token);
      }
    });
  };

  api.deleteJson = function(path, options) {
    var fail_fnc, success_fnc, url;
    options = options || {};
    success_fnc = options.success || function() {};
    fail_fnc = options.fail || api.defaultFail;
    url = api.url_for(path);
    api.doLog("Ajax DELETE Json for \"" + url + "\"");
    $.ajax({
      url: url,
      type: "DELETE",
      dataType: "json",
      success: function(data) {
        api.doLog("Success on DELETE \"" + url + "\".");
        success_fnc(data);
      },
      error: function(jqXHR, textStatus, errorThrown) {
        api.doLog("Error on DELETE \"" + url + "\". ", textStatus, ", ", errorThrown);
        fail_fnc(jqXHR, textStatus, errorThrown);
      },
      beforeSend: function(request) {
        request.setRequestHeader(api.config.auth_header, api.config.token);
      }
    });
  };

  Cache = (function() {
    function Cache(cacheName) {
      api.cacheTable[cacheName] = api.cacheTable[cacheName] || {};
      this.name = cacheName;
      this.cache = api.cacheTable[cacheName];
    }

    Cache.prototype.get = function(key, not_found_fnc) {
      not_found_fnc = not_found_fnc || function() {
        return null;
      };
      if (this.cache[key] == null) {
        this.cache[key] = not_found_fnc();
      }
      return this.cache[key] || void 0;
    };

    Cache.prototype.put = function(key, value) {
      this.cache[key] = value;
    };

    return Cache;

  })();

  BasicModelRest = (function() {
    function BasicModelRest(path, options) {
      options = options || {};
      path = path || "";
      this.path = path;
      this.getPath = options.getPath || path;
      this.logPath = options.logPath || path;
      this.putPath = options.putPath || path;
      this.testPath = options.testPath || (path + "/test");
      this.delPath = options.delPath || path;
      this.typesPath = options.typesPath || (path + "/types");
      this.guiPath = options.guiPath || (path + "/gui");
      this.tableInfoPath = options.tableInfoPath || (path + "/tableinfo");
      this.cache = api.cache("bmr" + path);
    }

    BasicModelRest.prototype._requestPath = function(path, options) {
      var $this, cacheKey, fail_fnc, success_fnc;
      api.doLog("Requesting ", path, options);
      options = options || {};
      success_fnc = options.success || function() {
        api.doLog("success function not provided for " + path);
      };
      fail_fnc = options.fail || function(jqXHR, textStatus, errorThrown) {
        api.doLog("failFnc not provided for " + path);
        gui.tools.unblockUI();
        return gui.notify('Error ocurred: ' + textStatus, 'danger');
      };
      cacheKey = options.cacheKey || path;
      api.doLog('CacheKey ', cacheKey);
      if (path === ".") {
        success_fnc({});
        return;
      }
      if (cacheKey !== "." && this.cache.get(cacheKey)) {
        api.doLog("Cache SUCCESS for " + cacheKey);
        success_fnc(this.cache.get(cacheKey));
      } else {
        api.doLog("Cache FAIL for " + cacheKey);
        $this = this;
        api.doLog('Obtaining json for ', path);
        api.getJson(path, {
          success: function(data) {
            if (cacheKey !== ".") {
              $this.cache.put(cacheKey, data);
            }
            success_fnc(data);
          },
          fail: fail_fnc
        });
      }
    };

    BasicModelRest.prototype.get = function(options) {
      var path;
      options = options || {};
      path = this.getPath;
      if (options.id) {
        path += "/" + options.id;
      }
      api.doLog("get Options: ", options, path);
      return this._requestPath(path, {
        cacheKey: ".",
        success: options.success,
        fail: options.fail
      });
    };

    BasicModelRest.prototype.list = function(success_fnc, fail_fnc) {
      return this.get({
        id: "",
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.overview = function(success_fnc, fail_fnc) {
      return this.get({
        id: "overview",
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.item = function(itemId, success_fnc, fail_fnc) {
      return this.get({
        id: itemId,
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.getLogs = function(itemId, success_fnc, fail_fnc) {
      var path;
      path = this.logPath + "/" + itemId + "/" + "log";
      return this._requestPath(path, {
        cacheKey: ".",
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.put = function(data, options) {
      var path;
      options = options || {};
      path = this.putPath;
      if (options.id) {
        path += "/" + options.id;
      }
      api.putJson(path, data, {
        success: options.success,
        fail: options.fail
      });
    };

    BasicModelRest.prototype.create = function(data, success_fnc, fail_fnc) {
      return this.put(data, {
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.save = function(data, success_fnc, fail_fnc) {
      return this.put(data, {
        id: data.id,
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.test = function(type, data, success_fnc, fail_fnc) {
      var path;
      path = this.testPath + "/" + type;
      api.putJson(path, data, {
        success: success_fnc,
        fail: fail_fnc,
        method: "POST"
      });
    };

    BasicModelRest.prototype.del = function(id, success_fnc, fail_fnc) {
      var path;
      path = this.delPath + "/" + id;
      api.deleteJson(path, {
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.permission = function() {
      if (api.config.admin === true) {
        return api.permissions.ALL;
      }
      return api.permissions.NONE;
    };

    BasicModelRest.prototype.getPermissions = function(id, success_fnc, fail_fnc) {
      var path;
      path = "permissions/" + this.path + '/' + id;
      return this._requestPath(path, {
        cacheKey: ".",
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.addPermission = function(id, type, itemId, perm, success_fnc, fail_fnc) {
      var data, path;
      path = "permissions/" + this.path + '/' + id + '/' + type + '/add/' + itemId;
      data = {
        perm: perm
      };
      return api.putJson(path, data, {
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.revokePermissions = function(itemIds, success_fnc, fail_fnc) {
      var data, path;
      path = "permissions/revoke";
      data = {
        items: itemIds
      };
      return api.putJson(path, data, {
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.types = function(success_fnc, fail_fnc) {
      return this._requestPath(this.typesPath, {
        cacheKey: this.typesPath,
        success: success_fnc
      });
    };

    BasicModelRest.prototype.gui = function(typeName, success_fnc, fail_fnc) {
      var path;
      path = null;
      if (typeName != null) {
        path = [this.guiPath, typeName].join("/");
      } else {
        path = this.guiPath;
      }
      return this._requestPath(path, {
        cacheKey: '.',
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.tableInfo = function(success_fnc, fail_fnc) {
      var path;
      success_fnc = success_fnc || function() {
        api.doLog("success not provided for tableInfo");
      };
      path = this.tableInfoPath;
      this._requestPath(path, {
        cacheKey: path,
        success: success_fnc,
        fail: fail_fnc
      });
    };

    BasicModelRest.prototype.detail = function(id, child, options) {
      options = options || {};
      return new DetailModelRestApi(this, id, child, options);
    };

    return BasicModelRest;

  })();

  DetailModelRestApi = (function(superClass) {
    extend(DetailModelRestApi, superClass);

    function DetailModelRestApi(parentApi, parentId, model, options) {
      DetailModelRestApi.__super__.constructor.call(this, [parentApi.path, parentId, model].join("/"));
      this.moptions = options;
    }

    DetailModelRestApi.prototype.permission = function() {
      if (this.moptions.permission != null) {
        return this.moptions.permission;
      } else {
        return api.permissions.ALL;
      }
    };

    DetailModelRestApi.prototype.create = function(data, success_fnc, fail_fnc) {
      return this.put(data, {
        success: success_fnc,
        fail: fail_fnc
      });
    };

    DetailModelRestApi.prototype.save = function(data, success_fnc, fail_fnc) {
      return this.put(data, {
        id: data.id,
        success: success_fnc,
        fail: fail_fnc
      });
    };

    DetailModelRestApi.prototype.types = function(success_fnc, fail_fnc) {
      if (this.moptions.types) {
        this.moptions.types(success_fnc, fail_fnc);
      } else {
        DetailModelRestApi.__super__.types.call(this, success_fnc, fail_fnc);
      }
    };

    DetailModelRestApi.prototype.invoke = function(method, success_fnc, fail_fnc, options) {
      var meth;
      options = options || {};
      meth = method;
      if (options.params) {
        meth += '?' + options.params;
      }
      return this.get({
        id: meth,
        success: success_fnc,
        fail: fail_fnc
      });
    };

    return DetailModelRestApi;

  })(BasicModelRest);

  api.providers = new BasicModelRest("providers");

  api.providers.allServices = function(success_fnc, fail_fnc) {
    return this.get({
      id: "allservices",
      success: success_fnc,
      fail: fail_fnc
    });
  };

  api.providers.service = function(id, success_fnc, fail_fnc) {
    return this.get({
      id: "service/" + id,
      success: success_fnc,
      fail: fail_fnc
    });
  };

  api.providers.maintenance = function(id, success_fnc, fail_fnc) {
    return this.get({
      id: id + "/maintenance",
      success: success_fnc,
      fail: fail_fnc
    });
  };

  api.authenticators = new BasicModelRest("authenticators");

  api.authenticators.search = function(id, type, term, success_fnc, fail_fnc) {
    return this.get({
      id: id + "/search?type=" + encodeURIComponent(type) + "&term=" + encodeURIComponent(term),
      success: success_fnc,
      fail: fail_fnc
    });
  };

  api.osmanagers = new BasicModelRest("osmanagers");

  api.transports = new BasicModelRest("transports");

  api.networks = new BasicModelRest("networks");

  api.servicesPools = new BasicModelRest("servicespools");

  api.servicesPools.setFallbackAccess = function(id, fallbackAccess, success_fnc, fail_fnc) {
    return this.get({
      id: id + '/setFallbackAccess?fallbackAccess=' + fallbackAccess,
      success: success_fnc,
      fail: fail_fnc
    });
  };

  api.servicesPools.actionsList = function(id, success_fnc, fail_fnc) {
    return this.get({
      id: id + '/actionsList',
      success: success_fnc,
      fail: fail_fnc
    });
  };

  api.configuration = new BasicModelRest("config");

  api.gallery = new BasicModelRest("gallery/images");

  api.sPoolGroups = new BasicModelRest("gallery/servicespoolgroups");

  api.system = new BasicModelRest("system");

  api.reports = new BasicModelRest("reports");

  api.calendars = new BasicModelRest("calendars");

  api.accounts = new BasicModelRest("accounts");

  api.accounts.timemark = function(id, success_fnc, fail_fnc) {
    return this.get({
      id: id + '/timemark',
      success: success_fnc,
      fail: fail_fnc
    });
  };

  api.proxies = new BasicModelRest("proxies");

  api.reports.types = function(success_fnc, fail_fnc) {
    return success_fnc([]);
  };

  api.system.stats = function(type, success_fnc, fail_fnc) {
    return this.get({
      id: "stats/" + type,
      success: success_fnc,
      fail: fail_fnc
    });
  };

  return;

}).call(this);
