// Generated by CoffeeScript 1.12.7
(function() {
  var slice = [].slice;

  (function(gui, $, undefined_) {
    "use strict";
    gui.debug = true;
    gui.lookupUuid = null;
    gui.lookup2Uuid = null;
    gui.doLog = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (gui.debug) {
        try {
          console.log(args);
        } catch (error) {}
      }
    };
    gui.config = gui.config || {};
    gui.config.dataTablesLanguage = {
      sLengthMenu: gettext("_MENU_ records per page"),
      emptyTable: gettext("Empty"),
      zeroRecords: gettext("No records"),
      info: gettext("Records _START_ to _END_ of _TOTAL_"),
      infoEmpty: gettext("No records"),
      infoFiltered: ' ' + gettext("(filtered from _MAX_ total records)"),
      processing: gettext("Please wait, processing"),
      search: gettext("Filter"),
      thousands: django.formats.THOUSAND_SEPARATOR,
      paginate: {
        first: "<span class=\"fa fa-fast-backward \"></span> ",
        last: "<span class=\"fa fa-fast-forward\"></span> ",
        next: "<span class=\"fa fa-forward\"></span> ",
        previous: "<span class=\"fa fa-backward\"></span> "
      },
      select: {
        rows: {
          _: gettext("Selected %d rows"),
          0: gettext("Click on a row to select it"),
          1: gettext("Selected one row")
        }
      }
    };
    gui.config.dataTableButtons = {
      "new": {
        text: "<span class=\"fa fa-file\"></span> <span class=\"label-tbl-button\">" + gettext("New") + "</span>",
        css: "btn btn-action btn-tables"
      },
      edit: {
        text: "<span class=\"fa fa-edit\"></span> <span class=\"label-tbl-button\">" + gettext("Edit") + "</span>",
        css: "btn disabled btn-action btn-tables"
      },
      "delete": {
        text: "<span class=\"fa fa-trash-o\"></span> <span class=\"label-tbl-button\">" + gettext("Delete") + "</span>",
        css: "btn disabled btn-alert btn-tables"
      },
      permissions: {
        text: "<span class=\"fa fa-save\"></span> <span class=\"label-tbl-button\">" + gettext("Permissions") + "</span>",
        css: "btn disabled btn-action btn-tables"
      },
      xls: {
        text: "<span class=\"fa fa-save\"></span> <span class=\"label-tbl-button\">" + gettext("Xls") + "</span>",
        css: "btn btn-export btn-tables"
      },
      custom: {
        text: null,
        css: "btn btn-action btn-tables"
      }
    };
    gui.genRamdonId = function(prefix) {
      prefix = prefix || "";
      return prefix + Math.random().toString().split(".")[1];
    };
    gui.table = function(title, table_id, options) {
      var panelId;
      options = options || {};
      panelId = "panel-" + table_id;
      return {
        text: api.templates.evaluate("tmpl_comp_table", {
          panelId: panelId,
          icon: api.config.img_url + 'icons/' + (options.icon || 'maleta') + '.png',
          size: options.size || 12,
          title: title,
          table_id: table_id
        }),
        panelId: panelId,
        refreshSelector: "#" + panelId + " span.fa-refresh"
      };
    };
    gui.breadcrumbs = function(path) {
      var active, items, list;
      items = path.split("/");
      active = items.pop();
      list = "";
      $.each(items, function(index, value) {
        list += "<li><a href=\"#\">" + value + "</a></li>";
      });
      list += "<li class=\"active\">" + active + "</li>";
      return "<div class=\"row\"><div class=\"col-lg-12\"><ol class=\"breadcrumb\">" + list + "</ol></div></div>";
    };
    gui.modal = function(id, title, content, options) {
      options = options || {};
      return api.templates.evaluate("tmpl_comp_modal", {
        id: id,
        title: title,
        content: content,
        footer: options.footer,
        button1: options.closeButton,
        button2: options.actionButton
      });
    };
    gui.launchModal = function(title, content, options) {
      var id;
      options = options || {};
      id = gui.genRamdonId("modal-");
      gui.appendToWorkspace(gui.modal(id, title, content, options));
      id = "#" + id;
      $(id).modal().on("hidden.bs.modal", function() {
        $(id).remove();
      });
      return id;
    };
    gui.notify = function(message, type) {
      gui.launchModal("<b class=\"text-" + type + "\">" + gettext("Message") + "</b>", "<span class=\"text-" + type + "\">" + message + "</span>", {
        actionButton: " ",
        closeButton: '<button type="button" class="btn btn-default" data-dismiss="modal">Ok</button>'
      });
    };
    gui.failRequestModalFnc = function(title) {
      return function(jqXHR, textStatus, errorThrown) {
        var errorText;
        errorText = jqXHR.status === 0 ? gettext('Connection failed') : jqXHR.responseText;
        gui.tools.unblockUI();
        gui.launchModal("<b class=\"text-danger\">" + title + "</b>", errorText, {
          actionButton: " "
        });
      };
    };
    gui.clearWorkspace = function() {
      $("#content").empty();
      $("#minimized").empty();
    };
    gui.appendToWorkspace = function(data) {
      $(data).appendTo("#content");
    };
    gui.cleanup = function() {
      gui.doLog("Cleaning up things");
      $.each($.fn.dataTable.fnTables(), function(undefined_, tbl) {
        var $tbl;
        $tbl = $(tbl).dataTable();
        $tbl.fnClearTable();
        $tbl.fnDestroy();
      });
    };
    gui.fastLink = function(text, href, onClick, clas) {
      return "<span>" + text + "</span><span style='float:right;'><a href='#" + href + "' onclick='" + onClick + "(event, this);' class='" + clas + "'><i class='fa fa-external-link'> </i></a></span>";
    };
    gui.setLinksEvents = function() {
      var sidebarLinks;
      sidebarLinks = [
        {
          id: "lnk-dashboard",
          exec: gui.dashboard.link,
          cleanup: true
        }, {
          id: "lnk-service_providers",
          exec: gui.providers.link,
          cleanup: true
        }, {
          id: "lnk-authenticators",
          exec: gui.authenticators.link,
          cleanup: true
        }, {
          id: "lnk-osmanagers",
          exec: gui.osmanagers.link,
          cleanup: true
        }, {
          id: "lnk-connectivity",
          exec: gui.connectivity.link,
          cleanup: true
        }, {
          id: "lnk-deployed_services",
          exec: gui.servicesPools.link,
          cleanup: true
        }, {
          id: "lnk-clear_cache",
          exec: gui.clear_cache.link,
          cleanup: false
        }, {
          id: "lnk-configuration",
          exec: gui.configuration.link,
          cleanup: false
        }, {
          id: "lnk-gallery",
          exec: gui.gallery.link,
          cleanup: true
        }, {
          id: "lnk-reports",
          exec: gui.reports.link,
          cleanup: true
        }, {
          id: "lnk-calendars",
          exec: gui.calendars.link,
          cleanup: true
        }, {
          id: "lnk-spoolsgroup",
          exec: gui.sPoolGroups.link,
          cleanup: true
        }
      ];
      $.each(sidebarLinks, function(index, value) {
        gui.doLog("Adding " + value.id);
        $("." + value.id).unbind("click").click(function(event) {
          event.preventDefault();
          if ($(".navbar-toggle").css("display") !== "none") {
            $(".navbar-toggle").trigger("click");
          }
          if (value.cleanup) {
            gui.cleanup();
          }
          $("html, body").scrollTop(0);
          value.exec(event);
        });
      });
    };
    gui.init = function() {
      gui.doLog($);
      $.extend($.validator.messages, {
        required: gettext("This field is required."),
        remote: gettext("Please fix this field."),
        email: gettext("Please enter a valid email address."),
        url: gettext("Please enter a valid URL."),
        date: gettext("Please enter a valid date."),
        dateISO: gettext("Please enter a valid date (ISO)."),
        number: gettext("Please enter a valid number."),
        digits: gettext("Please enter only digits."),
        creditcard: gettext("Please enter a valid credit card number."),
        equalTo: gettext("Please enter the same value again."),
        maxlength: $.validator.format(gettext("Please enter no more than {0} characters.")),
        minlength: $.validator.format(gettext("Please enter at least {0} characters.")),
        rangelength: $.validator.format(gettext("Please enter a value between {0} and {1} characters long.")),
        range: $.validator.format(gettext("Please enter a value between {0} and {1}.")),
        max: $.validator.format(gettext("Please enter a value less than or equal to {0}.")),
        min: $.validator.format(gettext("Please enter a value greater than or equal to {0}."))
      });
      $.blockUI.defaults.baseZ = 2000;
      $.fn.dataTableExt.oSort["uds-date-pre"] = function(s) {
        return parseInt(s.split("\"")[1], 10);
      };
      $.fn.dataTableExt.oSort["uds-date-asc"] = function(x, y) {
        var val;
        val = (x < y ? -1 : (x > y ? 1 : 0));
        return val;
      };
      $.fn.dataTableExt.oSort["uds-date-desc"] = function(x, y) {
        var val;
        val = (x < y ? 1 : (x > y ? -1 : 0));
        return val;
      };
      setTimeout((function() {
        gui.setLinksEvents();
        gui.dashboard.link();
      }), 500);
    };
    gui.showDashboard = function() {
      gui.dashboard.link();
    };
  })(window.gui = window.gui || {}, jQuery);

}).call(this);
