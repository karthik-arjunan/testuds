// Generated by CoffeeScript 1.12.7
(function() {
  gui.accounts = new GuiElement(api.accounts, "accounts");

  gui.accounts.link = function(event) {
    "use strict";
    var clearUsage, dateRenderer, renderer, useTable;
    dateRenderer = gui.tools.renderDate(api.tools.djangoFormat(get_format("SHORT_DATETIME_FORMAT")));
    renderer = function(fld, data, type, record) {
      if (fld === "time_mark") {
        if (data === 78793200) {
          return gettext('No Time Mark');
        }
        return dateRenderer(data);
      }
      return fld;
    };
    useTable = void 0;
    clearUsage = function() {
      var $tbl;
      if (useTable) {
        $tbl = $(useTable).dataTable();
        $tbl.fnClearTable();
        $tbl.fnDestroy();
        useTable = void 0;
      }
      $("#usage-placeholder").empty();
      $("#detail-placeholder").addClass("hidden");
    };
    api.templates.get("accounts", function(tmpl) {
      gui.clearWorkspace();
      gui.appendToWorkspace(api.templates.evaluate(tmpl, {
        accounts: "accounts-placeholder",
        usage: "usage-placeholder"
      }));
      gui.setLinksEvents();
      return gui.accounts.table({
        icon: 'accounts',
        container: "accounts-placeholder",
        callback: renderer,
        rowSelect: "single",
        onRefresh: function(tbl) {
          clearUsage();
        },
        onRowSelect: function(selected) {
          var id, usage, usageTable;
          clearUsage();
          $("#detail-placeholder").removeClass("hidden");
          id = selected[0].id;
          usage = new GuiElement(api.accounts.detail(id, "usage", {
            permission: selected[0].permission
          }), "Usage");
          usageTable = usage.table({
            icon: 'accounts',
            container: "usage-placeholder",
            rowSelect: "single",
            buttons: ["delete", "xls"],
            onLoad: function(k) {},
            onData: function(data) {
              gui.doLog('Accounts data received');
              $.each(data, function(index, value) {
                value.running = value.running ? gettext('Yes') : gettext('No');
              });
            }
          });
        },
        onRowDeselect: function() {
          clearUsage();
        },
        buttons: [
          "new", "edit", {
            text: gui.tools.iconAndText('fa-calendar', gettext('Set time mark')),
            css: "disabled",
            disabled: true,
            click: function(vals, value, btn, tbl, refreshFnc) {
              var val;
              val = vals[0];
              gui.forms.confirmModal(gettext("Time Mark"), gettext("Set timemark to current datetime?"), {
                onYes: function() {
                  gui.accounts.rest.timemark(vals[0].id + "/timemark", function() {
                    refreshFnc();
                  });
                }
              });
            },
            select: function(vals, value, btn, tbl, refreshFnc) {
              if (vals.length !== 1) {
                $(btn).addClass("disabled").prop('disabled', true);
                return;
              }
              return $(btn).removeClass("disabled").prop('disabled', false);
            }
          }, "delete", "xls", "permissions"
        ],
        onNew: gui.methods.typedNew(gui.accounts, gettext("New Account"), gettext("Account creation error")),
        onEdit: gui.methods.typedEdit(gui.accounts, gettext("Edit Account"), gettext("Account saving error")),
        onDelete: gui.methods.del(gui.accounts, gettext("Delete Account"), gettext("Account deletion error"))
      });
    });
    return false;
  };

  false;

}).call(this);
