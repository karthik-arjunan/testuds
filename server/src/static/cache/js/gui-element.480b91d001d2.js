// Generated by CoffeeScript 1.12.7
(function() {
  this.BasicGuiElement = function(name) {
    "use strict";
    this.name = name;
  };

  this.GuiElement = function(restItem, name, typesFunction) {
    "use strict";
    this.rest = restItem;
    this.name = name;
    this.types = {};
    this.initialized = false;
    this.init();
  };

  this.GuiElement.prototype = {
    init: function() {
      "use strict";
      var self;
      gui.doLog("Initializing " + this.name);
      self = this;
      this.rest.types(function(data) {
        var alreadyAttached, styles;
        styles = "";
        alreadyAttached = $("#gui-style-" + self.name).length !== 0;
        self.types = {};
        $.each(data, function(index, value) {
          var className, style;
          className = self.name + "-" + value.type;
          self.types[value.type] = value;
          self.types[value.type].css = className;
          gui.doLog("Creating style for " + className);
          if (!alreadyAttached) {
            style = "." + className + " { display:inline-block; background: url(data:image/png;base64," + value.icon + "); background-size: 16px 16px; background-repeat: no-repeat; width: 16px; height: 16px; vertical-align: middle; } ";
            styles += style;
          }
        });
        if (styles !== "") {
          styles = "<style id=\"gui-style-" + self.name + "\" media=\"screen\">" + styles + "</style>";
          $(styles).appendTo("head");
        }
        self.initialized = true;
      });
    },
    table: function(tblParams) {
      "use strict";
      var renderCallBack, renderEmptyCell, renderIcon, renderIconDict, renderImage, renderTextTransform, renderTypeIcon, self, tableId;
      tblParams = tblParams || {};
      self = this;
      if (self.initialized === false) {
        setTimeout((function() {
          gui.doLog('Delaying table creation');
          self.table(tblParams);
        }), 100);
        return;
      }
      gui.doLog("Composing table for " + this.name, tblParams);
      tableId = this.name + "-table";
      renderEmptyCell = function(data) {
        if (data === "") {
          return "-";
        }
        return data;
      };
      renderTypeIcon = function(data, type, value) {
        var css;
        if (type === "display") {
          self.types[value.type] = self.types[value.type] || {};
          css = self.types[value.type].css || "fa fa-asterisk";
          return "<span class=\"" + css + "\"></span> " + renderEmptyCell(data);
        } else {
          return renderEmptyCell(data);
        }
      };
      renderImage = function(data) {
        return "<img src=\"data:image/png;base64," + data + "\">";
      };
      renderIcon = function(icon) {
        return function(data, type, full) {
          if (type === "display") {
            return "<span class=\"" + icon + "\"></span> " + renderEmptyCell(data);
          } else {
            return renderEmptyCell(data);
          }
        };
      };
      renderIconDict = function(iconDict) {
        return function(data, type, value) {
          if (type === "display") {
            return "<span class=\"" + iconDict[value.type] + "\"></span> " + renderEmptyCell(data);
          } else {
            return renderEmptyCell(data);
          }
        };
      };
      renderTextTransform = function(dict) {
        return function(data, type, full) {
          return dict[data] || renderEmptyCell(data);
        };
      };
      renderCallBack = function(fld) {
        var callBack;
        gui.doLog("Rendering " + fld);
        if (tblParams.callback != null) {
          callBack = tblParams.callback;
          return function(data, type, value) {
            return callBack(fld, data, type, value);
          };
        } else {
          return function(data) {
            return fld;
          };
        }
      };
      this.rest.tableInfo(function(data) {
        var columns, initTable, lookupUuid, row_style, title;
        row_style = data["row-style"];
        title = data.title;
        columns = [
          {
            orderable: false,
            className: 'select-checkbox',
            width: "32px",
            render: function() {
              return '';
            }
          }
        ];
        $.each(data.fields, function(index, value) {
          var column, opts, v;
          for (v in value) {
            opts = value[v];
            column = {
              data: v
            };
            column.title = opts.title;
            column.render = renderEmptyCell;
            if (opts.width != null) {
              column.width = opts.width;
            }
            column.visible = (opts.visible == null ? true : opts.visible);
            if (opts.sortable != null) {
              column.orderable = opts.sortable;
            }
            if (opts.searchable != null) {
              column.searchable = opts.searchable;
            }
            if (opts.type && column.visible) {
              switch (opts.type) {
                case "date":
                  column.type = "uds-date";
                  column.render = gui.tools.renderDate(api.tools.djangoFormat(get_format("SHORT_DATE_FORMAT")));
                  break;
                case "datetime":
                  column.type = "uds-date";
                  column.render = gui.tools.renderDate(api.tools.djangoFormat(get_format("SHORT_DATETIME_FORMAT")));
                  break;
                case "time":
                  column.type = "uds-date";
                  column.render = gui.tools.renderDate(api.tools.djangoFormat(get_format("TIME_FORMAT")));
                  break;
                case "iconType":
                  column.render = renderTypeIcon;
                  break;
                case "icon":
                  if (opts.icon != null) {
                    column.render = renderIcon(opts.icon);
                  }
                  break;
                case "icon_dict":
                  if (opts.icon_dict != null) {
                    column.render = renderIconDict(opts.icon_dict);
                  }
                  break;
                case "image":
                  column.render = renderImage;
                  break;
                case "dict":
                  if (opts.dict != null) {
                    column.render = renderTextTransform(opts.dict);
                  }
                  break;
                case "callback":
                  column.render = renderCallBack(v);
                  break;
                case "number":
                  column.render = $.fn.dataTable.render.number(get_format("THOUSAND_SEPARATOR"), get_format("DECIMAL_SEPARATOR"));
                  break;
                default:
                  column.type = opts.type;
              }
            }
            columns.push(column);
          }
        });
        lookupUuid = function(dTable) {
          if (gui.lookupUuid != null) {
            gui.doLog("Looking up " + gui.lookupUuid);
            return dTable.rows().every(function(rowIdx, tableLoop, rowLoop) {
              var error, page;
              try {
                if (this.data().id === gui.lookupUuid) {
                  gui.doLog("Found: " + (this.data()));
                  gui.lookupUuid = null;
                  page = Math.floor(rowLoop / dTable.page.info().length);
                  dTable.page(page).draw(false);
                  this.select();
                  if (tblParams.onFoundUuid != null) {
                    return tblParams.onFoundUuid(this);
                  }
                }
              } catch (error1) {
                error = error1;
              }
            });
          }
        };
        initTable = function(data) {
          var $btn, $div, activeOnManySelected, activeOnOneSelected, btn, btnHtml, btnId, btns, clickHandlerFor, dTable, dataTableOptions, dct, deleteSelected, editSelected, field, i, len, onCheck, permissionsSelected, prefix, refreshFnc, rowDeselectedFnc, rowSelectedFnc, selCallback, selCallbackList, setBtnState, table, tableTop, tbId;
          if (tblParams.onData) {
            tblParams.onData(data);
          }
          table = gui.table(title, tableId, {
            icon: tblParams.icon
          });
          if (tblParams.container == null) {
            gui.appendToWorkspace("<div class=\"row\"><div class=\"col-lg-12\">" + table.text + "</div></div>");
          } else {
            $("#" + tblParams.container).empty();
            $("#" + tblParams.container).append(table.text);
          }
          if (tblParams.onRefresh == null) {
            tblParams.onRefresh = function(tbl) {};
          }
          self.refresh = refreshFnc = function() {
            var tbl;
            tbl = $("#" + tableId).DataTable();
            gui.tools.blockUI();
            setTimeout((function() {
              self.rest.overview((function(data) {
                if (tblParams.onData) {
                  tblParams.onData(data);
                }
                tbl.rows().remove();
                if (data.length > 0) {
                  tbl.rows.add(data);
                }
                tbl.columns.adjust().draw();
                selCallback(null, tbl, null, null);
                gui.doLog("onRefresh", tblParams.onRefresh);
                tblParams.onRefresh(self);
                lookupUuid(tbl);
                return gui.tools.unblockUI();
              }), gui.failRequestModalFnc(gettext("Refresh operation failed")));
            }), 0);
          };
          btns = [];
          if (tblParams.buttons) {
            clickHandlerFor = function(handler, action, newHandler) {
              var fnc, handleFnc;
              gui.doLog("Setting click handler for ", handler, action, newHandler);
              handleFnc = handler || function(sel, action, dtable, refreshFnc) {
                gui.doLog("Default handler called for ", sel, action);
              };
              return fnc = function(btn, sel, dtable) {
                gui.doLog("click handler: ", action, btn, sel, dtable);
                setTimeout((function() {
                  if (newHandler) {
                    handleFnc(action, dtable, refreshFnc);
                  } else {
                    handleFnc(sel, action, dtable, refreshFnc);
                  }
                }), 0);
              };
            };
            onCheck = tblParams.onCheck || function() {
              return true;
            };
            setBtnState = function(btn, enable, cls) {
              if (enable) {
                $(btn).prop('disabled', false);
                $(btn).addClass('disabled');
                $(btn).removeClass("disabled");
              } else {
                $(btn).prop('disabled', true);
                $(btn).removeClass(cls).addClass("disabled");
              }
            };
            activeOnOneSelected = function(cls) {
              return function(btn, sel, dtable) {
                return setBtnState(btn, (sel.length === 1 ? onCheck("edit", sel) : false), cls);
              };
            };
            activeOnManySelected = function(cls) {
              return function(btn, sel, dtable) {
                return setBtnState(btn, (sel.length >= 1 ? onCheck("delete", sel) : false), cls);
              };
            };
            editSelected = activeOnOneSelected('btn-success');
            deleteSelected = activeOnManySelected('btn-danger');
            permissionsSelected = activeOnOneSelected('btn-success');
            $.each(tblParams.buttons, function(index, value) {
              var btn, css, e, grouped, groups, i, k, len, menuId, ordered, perm, tmpGrp, v, val;
              btn = null;
              switch (value) {
                case "new":
                case "new_grouped":
                  grouped = value === "new_grouped" ? true : false;
                  if (self.rest.permission() >= api.permissions.MANAGEMENT) {
                    if (!api.tools.isEmpty(self.types)) {
                      menuId = gui.genRamdonId("dd-");
                      ordered = [];
                      $.each(self.types, function(k, v) {
                        var val;
                        val = {
                          type: k,
                          css: v.css,
                          name: v.name,
                          description: v.description,
                          group: v.group != null ? v.group : null
                        };
                        ordered.push(val);
                      });
                      ordered = ordered.sort(function(a, b) {
                        return a.name.localeCompare(b.name);
                      });
                      groups = [];
                      if (grouped) {
                        tmpGrp = {};
                        for (i = 0, len = ordered.length; i < len; i++) {
                          val = ordered[i];
                          if (tmpGrp[val.group] == null) {
                            tmpGrp[val.group] = [];
                          }
                          tmpGrp[val.group].push(val);
                        }
                        for (k in tmpGrp) {
                          v = tmpGrp[k];
                          groups.push({
                            name: k,
                            values: v
                          });
                        }
                        gui.doLog("***********GROUPSSS", groups);
                      }
                      btn = {
                        type: "div",
                        content: api.templates.evaluate(!grouped ? "tmpl_comp_dropdown" : "tmpl_comp_dropdown_grouped", {
                          label: gui.config.dataTableButtons["new"].text,
                          css: gui.config.dataTableButtons["new"].css,
                          id: menuId,
                          tableId: tableId,
                          columns: columns,
                          menu: !grouped ? ordered : groups
                        })
                      };
                    } else {
                      btn = {
                        type: "text",
                        content: gui.config.dataTableButtons["new"].text,
                        css: gui.config.dataTableButtons["new"].css,
                        fnClick: function() {
                          var selecteds;
                          selecteds = dTable.rows({
                            selected: true
                          }).data();
                          gui.doLog("New click: ", selecteds, dTable, refreshFnc);
                          return tblParams.onNew("new", dTable, refreshFnc);
                        }
                      };
                    }
                  }
                  break;
                case "edit":
                  if (self.rest.permission() >= api.permissions.MANAGEMENT) {
                    btn = {
                      type: "text",
                      content: gui.config.dataTableButtons.edit.text,
                      fnSelect: editSelected,
                      fnClick: function() {
                        var selecteds;
                        selecteds = dTable.rows({
                          selected: true
                        }).data();
                        gui.doLog("Edit click: ", selecteds, dTable, refreshFnc);
                        return tblParams.onEdit(selecteds[0], "edit", dTable, refreshFnc);
                      },
                      css: gui.config.dataTableButtons.edit.css
                    };
                  }
                  break;
                case "delete":
                  if (self.rest.permission() >= api.permissions.MANAGEMENT) {
                    btn = {
                      type: "text",
                      content: gui.config.dataTableButtons["delete"].text,
                      fnSelect: deleteSelected,
                      css: gui.config.dataTableButtons["delete"].css,
                      fnClick: function() {
                        var selecteds;
                        selecteds = dTable.rows({
                          selected: true
                        }).data();
                        gui.doLog("delete click: ", selecteds, dTable, refreshFnc);
                        return tblParams.onDelete(selecteds, "delete", dTable, refreshFnc);
                      }
                    };
                  }
                  break;
                case "refresh":
                  btn = {
                    type: "text",
                    content: gui.config.dataTableButtons.refresh.text,
                    fnClick: refreshFnc,
                    css: gui.config.dataTableButtons.refresh.css
                  };
                  break;
                case "permissions":
                  if (self.rest.permission() === api.permissions.ALL) {
                    btn = {
                      type: "text",
                      content: gui.config.dataTableButtons.permissions.text,
                      fnSelect: permissionsSelected,
                      fnClick: function() {
                        var selecteds;
                        selecteds = dTable.rows({
                          selected: true
                        }).data();
                        gui.doLog("Permissions click: ", selecteds, dTable, refreshFnc);
                        return gui.permissions(selecteds[0], self.rest, dTable, refreshFnc);
                      },
                      css: gui.config.dataTableButtons.permissions.css
                    };
                  }
                  break;
                case "xls":
                  btn = {
                    type: "text",
                    content: gui.config.dataTableButtons.xls.text,
                    fnClick: function() {
                      api.spreadsheet.tableToExcel(tableId, title);
                    },
                    css: gui.config.dataTableButtons.xls.css
                  };
                  break;
                default:
                  perm = value.permission != null ? value.permission : api.permissions.NONE;
                  if (self.rest.permission() >= perm) {
                    try {
                      css = (value.css ? value.css + " " : "") + gui.config.dataTableButtons.custom.css;
                      btn = {
                        type: "text",
                        content: value.text,
                        css: css,
                        disabled: (value.disabled != null) && value.disabled === true
                      };
                      if (value.click) {
                        btn.fnClick = function() {
                          var selecteds;
                          selecteds = dTable.rows({
                            selected: true
                          }).data();
                          setTimeout((function() {
                            value.click(selecteds, value, this, dTable, refreshFnc);
                          }), 0);
                        };
                      }
                      if (value.select) {
                        btn.fnSelect = function(btn, selecteds, dtable) {
                          setTimeout((function() {
                            value.select(selecteds, value, btn, dTable, refreshFnc);
                          }), 0);
                        };
                      }
                    } catch (error1) {
                      e = error1;
                      gui.doLog("Button", value, e);
                    }
                  }
              }
              if (btn) {
                btns.push(btn);
              }
            });
          }
          tbId = gui.genRamdonId('tb');
          dataTableOptions = {
            responsive: false,
            colReorder: true,
            stateSave: true,
            paging: true,
            info: true,
            autoWidth: true,
            lengthChange: false,
            pageLength: 10,
            ordering: true,
            order: [[1, 'asc']],
            dom: '<"' + tbId + ' btns-tables">fr<"uds-table"t>ip',
            select: {
              style: tblParams.rowSelect === 'multi' ? 'os' : 'single'
            },
            columns: columns,
            data: data,
            deferRender: tblParams.deferedRender || tblParams.deferRender || false,
            language: gui.config.dataTablesLanguage
          };
          if (row_style.field) {
            field = row_style.field;
            dct = row_style.dict;
            prefix = row_style.prefix;
            dataTableOptions.createdRow = function(row, data, dataIndex) {
              var err, v;
              try {
                v = (dct != null ? dct[data[field]] : data[field]);
                $(row).addClass(prefix + v);
              } catch (error1) {
                err = error1;
                gui.doLog("Exception got: ", err);
              }
            };
          }
          dTable = $("#" + tableId).DataTable(dataTableOptions);
          if (tblParams.onRowSelect) {
            rowSelectedFnc = tblParams.onRowSelect;
            dTable.on('select', function(e, dt, type, indexes) {
              var rows;
              rows = dt.rows({
                selected: true
              }).data();
              rowSelectedFnc(rows, dt);
            });
          }
          if (tblParams.onRowDeselect) {
            rowDeselectedFnc = tblParams.onRowDeselect;
            dTable.on('deselect', function(e, dt, type, indexes) {
              var rows;
              rows = dt.rows(indexes).data();
              gui.doLog("Deselect: ", dt.rows({
                selected: true
              }).length, dt.rows({
                selected: true
              }).data().length);
              rowDeselectedFnc(rows, dt);
            });
          }
          selCallbackList = [];
          for (i = 0, len = btns.length; i < len; i++) {
            btn = btns[i];
            $div = $('div.' + tbId);
            if (btn.type === 'text') {
              gui.doLog("Button: ", btn);
              btnId = gui.genRamdonId('btn');
              btnHtml = '<button id="' + btnId + '" class="' + btn.css + '"';
              if ((btn.disabled != null) && btn.disabled === true) {
                btnHtml += ' disabled';
              }
              btnHtml += '>' + btn.content + '</button>';
              gui.doLog("Button2: ", btnHtml);
              $div.append(btnHtml);
              $btn = $('#' + btnId);
              $btn.on('click', btn.fnClick);
              if (btn.fnSelect != null) {
                selCallbackList.push({
                  btnId: '#' + btnId,
                  callback: btn.fnSelect
                });
                btn.fnSelect($btn, [], dTable);
              }
            } else {
              $div.append('<div style="float: left;">' + btn.content + '</div>');
            }
          }
          selCallback = function(e, dt, type, indexes) {
            var j, len1, results, rows, v;
            results = [];
            for (j = 0, len1 = selCallbackList.length; j < len1; j++) {
              v = selCallbackList[j];
              rows = dt.rows({
                selected: true
              }).data();
              results.push(v.callback($(v.btnId), rows, dt));
            }
            return results;
          };
          dTable.on('select', selCallback);
          dTable.on('deselect', selCallback);
          $("#" + tableId + "_filter label").addClass("form-inline");
          $("#" + tableId + "_filter input").addClass("form-control");
          $(table.refreshSelector).click(refreshFnc);
          $("#" + table.panelId + " [data-toggle=\"tooltip\"]").tooltip({
            container: "body",
            delay: {
              show: 1000,
              hide: 100
            },
            placement: "auto right"
          });
          if (tblParams.onNew) {
            $("#" + table.panelId + " [data-type]").on("click", function(event) {
              var tbl, type;
              event.preventDefault();
              tbl = $("#" + tableId).dataTable();
              type = $(this).attr("data-type");
              setTimeout((function() {
                tblParams.onNew(type, tbl, refreshFnc);
              }), 0);
            });
          }
          if (tblParams.scrollToTable === true) {
            tableTop = $("#" + tableId).offset().top;
            $("html, body").scrollTop(tableTop);
          }
          gui.test = dTable;
          lookupUuid(dTable);
          if (tblParams.onLoad) {
            tblParams.onLoad(self);
          }
        };
        if (tblParams.doNotLoadData !== true) {
          self.rest.overview(function(data) {
            return initTable(data);
          });
        } else {
          initTable([]);
        }
      });
      return "#" + tableId;
    },
    logTable: function(itemId, tblParams) {
      "use strict";
      var columns, initLog, logRenderer, refreshFnc, self, table, tableId, tbId;
      tblParams = tblParams || {};
      gui.doLog("Composing log for " + this.name);
      tableId = this.name + "-table-log";
      self = this;
      refreshFnc = function() {
        var tbl;
        tbl = $("#" + tableId).dataTable();
        gui.tools.blockUI();
        self.rest.getLogs(itemId, function(data) {
          setTimeout((function() {
            tbl.fnClearTable();
            if (data.length > 0) {
              tbl.fnAddData(data);
            }
            gui.tools.unblockUI();
          }), 0);
        });
        return false;
      };
      logRenderer = gui.tools.renderLogLovel();
      columns = [
        {
          data: "date",
          title: gettext("Date"),
          type: "uds-date",
          asSorting: ["desc", "asc"],
          render: gui.tools.renderDate(api.tools.djangoFormat(get_format("SHORT_DATE_FORMAT") + " " + get_format("TIME_FORMAT"))),
          orderable: true,
          searchable: true
        }, {
          data: "level",
          title: gettext("level"),
          render: logRenderer,
          width: "5em",
          orderable: true,
          searchable: true
        }, {
          data: "source",
          title: gettext("source"),
          width: "5em",
          orderable: true,
          searchable: true
        }, {
          data: "message",
          title: gettext("message"),
          orderable: true,
          searchable: true
        }
      ];
      table = gui.table(tblParams.title || gettext("Logs"), tableId, {
        icon: tblParams.icon || 'logs'
      });
      if (tblParams.container == null) {
        gui.appendToWorkspace("<div class=\"row\"><div class=\"col-lg-12\">" + table.text + "</div></div>");
      } else {
        $("#" + tblParams.container).empty();
        $("#" + tblParams.container).append(table.text);
      }
      tbId = gui.genRamdonId('tb');
      initLog = function(data) {
        $("#" + tableId).DataTable({
          data: data,
          ordering: true,
          order: [[1, 'desc']],
          columns: columns,
          language: gui.config.dataTablesLanguage,
          dom: '<"' + tbId + ' btns-tables">fr<"uds-table"t>ip',
          deferRender: tblParams.deferedRender || tblParams.deferRender || false,
          createdRow: function(row, data, dataIndex) {
            var error, v;
            try {
              v = "log-" + logRenderer(data.level);
              $(row).addClass(v);
            } catch (error1) {
              error = error1;
              gui.doLog("Log cretedRow error", error);
            }
          }
        });
        $("#" + tableId + "_filter label").addClass("form-inline");
        $("#" + tableId + "_filter input").addClass("form-control");
        $(table.refreshSelector).click(refreshFnc);
        if (tblParams.onLoad) {
          tblParams.onLoad(self);
        }
      };
      if (tblParams.doNotLoadData !== true) {
        self.rest.getLogs(itemId, function(data) {
          return initLog(data);
        });
      } else {
        initLog([]);
      }
      return "#" + tableId;
    }
  };

}).call(this);
