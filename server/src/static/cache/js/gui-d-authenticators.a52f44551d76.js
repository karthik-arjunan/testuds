// Generated by CoffeeScript 1.12.7
(function() {
  gui.authenticators = new GuiElement(api.authenticators, "auth");

  gui.authenticators.link = function(event) {
    "use strict";
    var clearDetailLog, clearDetails, detailLogTable, prevTables, searchForm, testButton;
    testButton = {
      testButton: {
        text: gettext("Test"),
        css: "btn-info"
      }
    };
    detailLogTable = null;
    clearDetailLog = function() {
      var $tbl;
      if (detailLogTable != null) {
        $tbl = $(detailLogTable).dataTable();
        $tbl.fnClearTable();
        $tbl.fnDestroy();
        detailLogTable = null;
      }
      $("#users-log-placeholder").empty();
    };
    prevTables = [];
    clearDetails = function() {
      clearDetailLog();
      $.each(prevTables, function(undefined_, tbl) {
        var $tbl;
        $tbl = $(tbl).dataTable();
        $tbl.fnClearTable();
        $tbl.fnDestroy();
      });
      $("#users-placeholder").empty();
      $("#groups-placeholder").empty();
      $("#logs-placeholder").empty();
      $("#detail-placeholder").addClass("hidden");
      prevTables = [];
    };
    searchForm = function(parentModalId, type, id, title, searchLabel, resultsLabel) {
      var errorModal, srcSelector;
      errorModal = gui.failRequestModalFnc(gettext("Search error"));
      srcSelector = parentModalId + " input[name=\"name\"]";
      $(parentModalId + " .button-search").on("click", function() {
        api.templates.get("search", function(tmpl) {
          var $saveButton, $searchButton, $searchInput, $select, modalId;
          modalId = gui.launchModal(title, api.templates.evaluate(tmpl, {
            search_label: searchLabel,
            results_label: resultsLabel
          }), {
            actionButton: "<button type=\"button\" class=\"btn btn-success button-accept\">" + gettext("Accept") + "</button>"
          });
          $searchInput = $(modalId + " input[name=\"search\"]");
          $select = $(modalId + " select[name=\"results\"]");
          $searchButton = $(modalId + " .button-do-search");
          $saveButton = $(modalId + " .button-accept");
          $searchInput.val($(srcSelector).val());
          $saveButton.on("click", function() {
            var value;
            value = $select.val();
            if (value) {
              $(srcSelector).val(value);
              $(modalId).modal("hide");
            }
          });
          $searchButton.on("click", function() {
            var term;
            $searchButton.addClass("disabled");
            term = $searchInput.val();
            api.authenticators.search(id, type, term, (function(data) {
              $searchButton.removeClass("disabled");
              $select.empty();
              gui.doLog(data);
              $.each(data, function(undefined_, value) {
                $select.append($('<option>', {
                  value: value.id,
                  text: value.id + "   (" + value.name + ")"
                }));
              });
            }), function(jqXHR, textStatus, errorThrown) {
              $searchButton.removeClass("disabled");
              errorModal(jqXHR, textStatus, errorThrown);
            });
          });
          $(modalId + " form").submit(function(event) {
            event.preventDefault();
            $searchButton.click();
          });
          if ($searchInput.val() !== "") {
            $searchButton.click();
          }
        });
      });
    };
    api.templates.get("authenticators", function(tmpl) {
      var tableId;
      gui.clearWorkspace();
      gui.appendToWorkspace(api.templates.evaluate(tmpl, {
        auths: "auths-placeholder",
        auths_info: "auths-info-placeholder",
        users: "users-placeholder",
        users_log: "users-log-placeholder",
        groups: "groups-placeholder",
        logs: "logs-placeholder"
      }));
      gui.setLinksEvents();
      $(".bottom_tabs").on("click", function(event) {
        gui.doLog(event.target);
        setTimeout((function() {
          $($(event.target).attr("href") + " span.fa-refresh").click();
        }), 10);
      });
      tableId = gui.authenticators.table({
        icon: 'authenticators',
        container: "auths-placeholder",
        rowSelect: "multi",
        buttons: ["new", "edit", "delete", "xls", "permissions"],
        onFoundUuid: function(item) {
          var type;
          if (gui.lookup2Uuid != null) {
            type = gui.lookup2Uuid[0];
            gui.lookupUuid = gui.lookup2Uuid.substr(1);
            gui.lookup2Uuid = null;
            return setTimeout(function() {
              if (type === 'g') {
                $('a[href="#groups-placeholder"]').tab('show');
                return $("#groups-placeholder span.fa-refresh").click();
              } else {
                $('a[href="#users-placeholder_tab"]').tab('show');
                return $("#users-placeholder_tab span.fa-refresh").click();
              }
            }, 500);
          }
        },
        onRefresh: function(tbl) {
          gui.doLog('Refresh called for authenticators');
          clearDetails();
        },
        onRowDeselect: function(deselected, dtable) {
          clearDetails();
        },
        onRowSelect: function(selected) {
          var group, grpTable, id, logTable, tmpLogTable, type, user, usrButtons, usrTable;
          clearDetails();
          if (selected.length > 1) {
            return;
          }
          $("#detail-placeholder").removeClass("hidden");
          $('#detail-placeholder a[href="#auths-info-placeholder"]').tab('show');
          gui.tools.blockUI();
          gui.methods.typedShow(gui.authenticators, selected[0], '#auths-info-placeholder .well', gettext('Error accessing data'));
          id = selected[0].id;
          type = gui.authenticators.types[selected[0].type];
          gui.doLog("Type", type);
          user = new GuiElement(api.authenticators.detail(id, "users", {
            permission: selected[0].permission
          }), "users");
          group = new GuiElement(api.authenticators.detail(id, "groups", {
            permission: selected[0].permission
          }), "groups");
          grpTable = group.table({
            icon: 'groups',
            container: "groups-placeholder",
            doNotLoadData: true,
            rowSelect: "multi",
            buttons: [
              "new", "edit", {
                text: gui.tools.iconAndText('fa-info', gettext('Information')),
                css: "disabled",
                disabled: true,
                click: function(vals, value, btn, tbl, refreshFnc) {
                  var val;
                  if (vals.length > 1) {
                    return;
                  }
                  val = vals[0];
                  group.rest.invoke(val.id + "/servicesPools", function(pools) {
                    return group.rest.invoke(val.id + "/users", function(users) {
                      return group.rest.overview(function(groups) {
                        var renderDate;
                        renderDate = gui.tools.renderDate(api.tools.djangoFormat(get_format("SHORT_DATETIME_FORMAT")));
                        gui.tools.renderDate(api.tools.djangoFormat(get_format("SHORT_DATETIME_FORMAT")));
                        gui.doLog("Pools", pools);
                        return api.templates.get("group-info", function(tmpl) {
                          var content, modalId;
                          content = api.templates.evaluate(tmpl, {
                            id: 'information',
                            pools: pools,
                            users: users,
                            groups: val.type === 'meta' ? val.groups : null,
                            meta: val.type === 'meta',
                            meta_if_any: val.meta_if_any,
                            groups_all: groups,
                            goClass: 'goLink'
                          });
                          modalId = gui.launchModal(gettext('Group information'), content, {
                            actionButton: " "
                          });
                          $('#information-pools-table').DataTable({
                            colReorder: true,
                            stateSave: true,
                            paging: true,
                            info: false,
                            autoWidth: false,
                            lengthChange: false,
                            pageLength: 10,
                            columnDefs: [
                              {
                                'width': '50%',
                                'targets': 0
                              }, {
                                'width': '120px',
                                'targets': 1
                              }, {
                                'width': '40px',
                                'targets': 2
                              }, {
                                'width': '160px',
                                'targets': 3
                              }
                            ],
                            ordering: true,
                            order: [[1, 'asc']],
                            dom: '<>fr<"uds-table"t>ip',
                            language: gui.config.dataTablesLanguage
                          });
                          $('#information-users-table').DataTable({
                            colReorder: true,
                            stateSave: true,
                            paging: true,
                            info: false,
                            autoWidth: false,
                            lengthChange: false,
                            pageLength: 10,
                            columnDefs: [
                              {
                                'width': '30%',
                                'targets': 0
                              }, {
                                'width': '30%',
                                'targets': 1
                              }, {
                                'width': '15%',
                                'targets': 2
                              }, {
                                'width': '25%',
                                'targets': 3,
                                'render': renderDate
                              }
                            ],
                            ordering: true,
                            order: [[1, 'asc']],
                            dom: '<>fr<"uds-table"t>ip',
                            language: gui.config.dataTablesLanguage
                          });
                          $('#information-groups-table').DataTable({
                            colReorder: true,
                            stateSave: true,
                            paging: true,
                            info: false,
                            autoWidth: false,
                            lengthChange: false,
                            pageLength: 10,
                            columnDefs: [
                              {
                                'width': '40%',
                                'targets': 0
                              }, {
                                'width': '60%',
                                'targets': 1
                              }
                            ],
                            ordering: true,
                            order: [[1, 'asc']],
                            dom: '<>fr<"uds-table"t>ip',
                            language: gui.config.dataTablesLanguage
                          });
                          return $('.goLink').on('click', function(event) {
                            var $this;
                            $this = $(this);
                            event.preventDefault();
                            gui.lookupUuid = $this.attr('href').substr(1);
                            $(modalId).modal('hide');
                            return setTimeout(function() {
                              return $(".lnk-deployed_services").click();
                            }, 500);
                          });
                        });
                      });
                    });
                  });
                },
                select: function(vals, value, btn, tbl, refreshFnc) {
                  if (vals.length !== 1) {
                    $(btn).addClass("disabled").prop('disabled', true);
                    return;
                  }
                  $(btn).removeClass("disabled").prop('disabled', false);
                }
              }, "delete", "xls"
            ],
            onLoad: function(k) {
              gui.tools.unblockUI();
            },
            onEdit: function(value, event, table, refreshFnc) {
              var exec;
              exec = function(groups_all) {
                gui.tools.blockUI();
                api.templates.get("group", function(tmpl) {
                  group.rest.item(value.id, function(item) {
                    var modalId;
                    modalId = gui.launchModal(gettext("Edit group") + " <b>" + item.name + "</b>", api.templates.evaluate(tmpl, {
                      id: item.id,
                      type: item.type,
                      meta_if_any: item.meta_if_any,
                      groupname: item.name,
                      groupname_label: type.groupNameLabel,
                      comments: item.comments,
                      state: item.state,
                      external: type.isExternal,
                      canSearchGroups: type.canSearchGroups,
                      groups: item.groups,
                      groups_all: groups_all
                    }));
                    gui.tools.applyCustoms(modalId);
                    gui.tools.unblockUI();
                    $(modalId + " .button-accept").click(function() {
                      var fields;
                      fields = gui.forms.read(modalId);
                      gui.doLog("Fields", fields);
                      group.rest.save(fields, (function(data) {
                        $(modalId).modal("hide");
                        refreshFnc();
                        gui.notify(gettext("Group saved"), "success");
                      }), gui.failRequestModalFnc("Error saving group", true));
                    });
                  });
                });
              };
              if (value.type === "meta") {
                group.rest.overview(function(groups) {
                  exec(groups);
                });
              } else {
                exec();
              }
            },
            onNew: function(t, table, refreshFnc) {
              var exec;
              exec = function(groups_all) {
                gui.tools.blockUI();
                api.templates.get("group", function(tmpl) {
                  var modalId, title;
                  if (t === "meta") {
                    title = gettext("New meta group");
                  } else {
                    title = gettext("New group");
                  }
                  modalId = gui.launchModal(title, api.templates.evaluate(tmpl, {
                    type: t,
                    groupname_label: type.groupNameLabel,
                    external: type.isExternal,
                    canSearchGroups: type.canSearchGroups,
                    groups: [],
                    groups_all: groups_all
                  }));
                  gui.tools.unblockUI();
                  gui.tools.applyCustoms(modalId);
                  searchForm(modalId, "group", id, gettext("Search groups"), gettext("Group"), gettext("Groups found"));
                  $(modalId + " .button-accept").click(function() {
                    var fields;
                    fields = gui.forms.read(modalId);
                    gui.doLog("Fields", fields);
                    group.rest.create(fields, (function(data) {
                      $(modalId).modal("hide");
                      refreshFnc();
                      gui.notify(gettext("Group saved"), "success");
                    }), gui.failRequestModalFnc(gettext("Group saving error"), true));
                  });
                });
              };
              if (t === "meta") {
                group.rest.overview(function(groups) {
                  exec(groups);
                });
              } else {
                exec();
              }
            },
            onDelete: gui.methods.del(group, gettext("Delete group"), gettext("Group deletion error"))
          });
          tmpLogTable = null;
          usrButtons = [
            "edit", {
              text: gui.tools.iconAndText('fa-info', gettext('Information')),
              css: "disabled",
              disabled: true,
              click: function(vals, value, btn, tbl, refreshFnc) {
                var val;
                if (vals.length > 1) {
                  return;
                }
                val = vals[0];
                user.rest.invoke(val.id + "/servicesPools", function(pools) {
                  return user.rest.invoke(val.id + "/userServices", function(userServices) {
                    return user.rest.item(val.id, function(item) {
                      return group.rest.overview(function(groups) {
                        gui.doLog("Pools", pools);
                        return api.templates.get("user-info", function(tmpl) {
                          var content, modalId;
                          content = api.templates.evaluate(tmpl, {
                            id: 'information',
                            groups_all: groups,
                            groups: item.groups,
                            pools: pools,
                            userServices: userServices,
                            goClass: 'goLink'
                          });
                          modalId = gui.launchModal(gettext('User information'), content, {
                            actionButton: " "
                          });
                          $('#information-groups-table').DataTable({
                            colReorder: true,
                            stateSave: true,
                            paging: true,
                            info: false,
                            autoWidth: false,
                            lengthChange: false,
                            pageLength: 10,
                            columnDefs: [
                              {
                                'width': '100%',
                                'targets': 0
                              }
                            ],
                            ordering: true,
                            order: [[0, 'asc']],
                            dom: '<>fr<"uds-table"t>ip',
                            language: gui.config.dataTablesLanguage
                          });
                          $('#information-pools-table').DataTable({
                            colReorder: true,
                            stateSave: true,
                            paging: true,
                            info: false,
                            autoWidth: false,
                            lengthChange: false,
                            pageLength: 10,
                            columnDefs: [
                              {
                                'width': '50%',
                                'targets': 0
                              }, {
                                'width': '120px',
                                'targets': 1
                              }, {
                                'width': '40px',
                                'targets': 2
                              }, {
                                'width': '160px',
                                'targets': 3
                              }
                            ],
                            ordering: true,
                            order: [[1, 'asc']],
                            dom: '<>fr<"uds-table"t>ip',
                            language: gui.config.dataTablesLanguage
                          });
                          $('#information-userservices-table').DataTable({
                            colReorder: true,
                            stateSave: true,
                            paging: true,
                            info: false,
                            autoWidth: false,
                            lengthChange: false,
                            pageLength: 10,
                            columnDefs: [
                              {
                                'width': '25%',
                                'targets': 0
                              }, {
                                'width': '25%',
                                'targets': 1
                              }, {
                                'width': '120px',
                                'targets': 2
                              }, {
                                'width': '20%',
                                'targets': 3
                              }, {
                                'width': '20%',
                                'targets': 4
                              }
                            ],
                            ordering: true,
                            order: [[1, 'asc']],
                            dom: '<>fr<"uds-table"t>ip',
                            language: gui.config.dataTablesLanguage
                          });
                          return $('.goLink').on('click', function(event) {
                            var $this;
                            $this = $(this);
                            event.preventDefault();
                            gui.lookupUuid = $this.attr('href').substr(1);
                            $(modalId).modal('hide');
                            return setTimeout(function() {
                              return $(".lnk-deployed_services").click();
                            }, 500);
                          });
                        });
                      });
                    });
                  });
                });
              },
              select: function(vals, value, btn, tbl, refreshFnc) {
                if (vals.length !== 1) {
                  $(btn).addClass("disabled").prop('disabled', true);
                  return;
                }
                $(btn).removeClass("disabled").prop('disabled', false);
              }
            }, "delete", "xls"
          ];
          if (type.canCreateUsers) {
            usrButtons = ["new"].concat(usrButtons);
          }
          usrTable = user.table({
            icon: 'users',
            container: "users-placeholder",
            doNotLoadData: true,
            rowSelect: "multi",
            onRowSelect: function(uselected) {
              var uId;
              gui.doLog('User row selected ', uselected);
              gui.tools.blockUI();
              uId = uselected[0].id;
              clearDetailLog();
              tmpLogTable = user.logTable(uId, {
                container: "users-log-placeholder",
                onLoad: function() {
                  detailLogTable = tmpLogTable;
                  gui.tools.unblockUI();
                }
              });
            },
            onRowDeselect: function() {
              clearDetailLog();
            },
            buttons: usrButtons,
            deferedRender: true,
            scrollToTable: false,
            onLoad: function(k) {
              gui.tools.unblockUI();
            },
            onRefresh: function() {
              gui.doLog("Refreshing");
              clearDetailLog();
            },
            onEdit: function(value, event, table, refreshFnc) {
              var password;
              password = "#æð~¬ŋ@æß”¢€~½¬@#~þ¬@|";
              gui.tools.blockUI();
              api.templates.get("user", function(tmpl) {
                group.rest.overview(function(groups) {
                  user.rest.item(value.id, function(item) {
                    var modalId;
                    modalId = gui.launchModal(gettext("Edit user") + " <b>" + value.name + "</b>", api.templates.evaluate(tmpl, {
                      id: item.id,
                      username: item.name,
                      username_label: type.userNameLabel,
                      realname: item.real_name,
                      comments: item.comments,
                      state: item.state,
                      staff_member: item.staff_member,
                      is_admin: item.is_admin,
                      needs_password: type.needsPassword,
                      password: (type.needsPassword ? password : void 0),
                      password_label: type.passwordLabel,
                      groups_all: groups,
                      groups: item.groups,
                      external: type.isExternal,
                      canSearchUsers: type.canSearchUsers
                    }));
                    gui.tools.applyCustoms(modalId);
                    gui.tools.unblockUI();
                    $(modalId + " .button-accept").click(function() {
                      var fields;
                      fields = gui.forms.read(modalId);
                      gui.doLog("passwords", type.needsPassword, password, fields.password);
                      if (type.needsPassword) {
                        if (fields.password === password) {
                          delete fields.password;
                        }
                      }
                      gui.doLog("Fields", fields);
                      user.rest.save(fields, (function(data) {
                        $(modalId).modal("hide");
                        refreshFnc();
                        gui.notify(gettext("User saved"), "success");
                      }), gui.failRequestModalFnc(gettext("User saving error"), true));
                    });
                  });
                });
              });
            },
            onNew: function(undefined_, table, refreshFnc) {
              gui.tools.blockUI();
              api.templates.get("user", function(tmpl) {
                group.rest.overview(function(groups) {
                  var modalId;
                  modalId = gui.launchModal(gettext("New user"), api.templates.evaluate(tmpl, {
                    username_label: type.userNameLabel,
                    needs_password: type.needsPassword,
                    password_label: type.passwordLabel,
                    groups_all: groups,
                    groups: [],
                    external: type.isExternal,
                    canSearchUsers: type.canSearchUsers
                  }));
                  gui.tools.applyCustoms(modalId);
                  gui.tools.unblockUI();
                  searchForm(modalId, "user", id, gettext("Search users"), gettext("User"), gettext("Users found"));
                  $(modalId + " .button-accept").click(function() {
                    var fields;
                    fields = gui.forms.read(modalId);
                    gui.doLog("Fields", fields);
                    user.rest.create(fields, (function(data) {
                      $(modalId).modal("hide");
                      refreshFnc();
                      gui.notify(gettext("User saved"), "success");
                    }), gui.failRequestModalFnc(gettext("User saving error"), true));
                  });
                });
              });
            },
            onDelete: gui.methods.del(user, gettext("Delete user"), gettext("User deletion error"))
          });
          logTable = gui.authenticators.logTable(id, {
            container: "logs-placeholder",
            doNotLoadData: true
          });
          prevTables.push(grpTable);
          prevTables.push(usrTable);
          prevTables.push(logTable);
          return false;
        },
        onNew: gui.methods.typedNew(gui.authenticators, gettext("New authenticator"), gettext("Authenticator creation error"), testButton),
        onEdit: gui.methods.typedEdit(gui.authenticators, gettext("Edit authenticator"), gettext("Authenticator saving error"), testButton),
        onDelete: gui.methods.del(gui.authenticators, gettext("Delete authenticator"), gettext("Authenticator deletion error"))
      });
    });
    return false;
  };

}).call(this);
