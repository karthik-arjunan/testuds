// Generated by CoffeeScript 1.12.7
(function() {
  var hasProp = {}.hasOwnProperty;

  gui.calendars = new GuiElement(api.calendars, "calendars");

  gui.calendars.link = function() {
    "use strict";
    var clearRules, dateFormat, dunitDct, freqDct, getWeekDays, newEditFnc, renderer, rulesTable, weekDays;
    rulesTable = void 0;
    clearRules = function() {
      var $tbl;
      if (rulesTable) {
        $tbl = $(rulesTable).dataTable();
        $tbl.fnClearTable();
        $tbl.fnDestroy();
        rulesTable = void 0;
      }
      $("#rules-placeholder").empty();
      $("#detail-placeholder").addClass("hidden");
    };
    freqDct = {
      'DAILY': [gettext('day'), gettext('days'), gettext('Daily')],
      'WEEKLY': [gettext('week'), gettext('weeks'), gettext('Weekly')],
      'MONTHLY': [gettext('month'), gettext('months'), gettext('Monthly')],
      'YEARLY': [gettext('year'), gettext('years'), gettext('Yearly')],
      'WEEKDAYS': ['', '', gettext('Weekdays')]
    };
    dunitDct = {
      'MINUTES': gettext('Minutes'),
      'HOURS': gettext('Hours'),
      'DAYS': gettext('Days'),
      'WEEKS': gettext('Weeks')
    };
    weekDays = [gettext('Sun'), gettext('Monday'), gettext('Tuesday'), gettext('Wednesday'), gettext('Thursday'), gettext('Friday'), gettext('Saturday')];
    dateFormat = api.tools.djangoFormat(get_format("SHORT_DATE_FORMAT"));
    getWeekDays = function(bits, full) {
      var i, j, res;
      res = [];
      for (i = j = 0; j <= 6; i = ++j) {
        if (bits & 1 !== 0) {
          if (full === void 0) {
            res.push(weekDays[i].substr(0, 3));
          } else {
            res.push(weekDays[i]);
          }
        }
        bits >>= 1;
      }
      if (res.length === 0) {
        return gettext("(no days)");
      }
      return res.join(', ');
    };
    renderer = function(fld, data, type, record) {
      var e;
      if (fld === "interval") {
        if (record.frequency === "WEEKDAYS") {
          return getWeekDays(data);
        }
        try {
          return data + " " + freqDct[record.frequency][pluralidx(data)];
        } catch (error) {
          e = error;
          return e;
        }
      } else if (fld === "duration") {
        return data + " " + dunitDct[record.duration_unit];
      }
      return fld;
    };
    newEditFnc = function(rules, forEdit) {
      var days, fillDateTime, getDateTime, readFields, realFnc, sortFnc, updateSummary, w;
      days = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = weekDays.length; j < len; j++) {
          w = weekDays[j];
          results.push(w.substr(0, 3));
        }
        return results;
      })();
      sortFnc = function(a, b) {
        if (a.value > b.value) {
          return 1;
        }
        if (a.value < b.value) {
          return -1;
        }
        return 0;
      };
      fillDateTime = function(idDate, stamp) {
        var date;
        if (stamp === null) {
          return;
        }
        date = new Date(stamp * 1000);
        $(idDate).val(api.tools.strftime('%Y-%m-%d', date));
        return $(idDate + "-time").val(date.toTimeString().split(':').slice(0, 2).join(':'));
      };
      getDateTime = function(idDate, withoutTime) {
        var date, time;
        date = $(idDate).val();
        if (date === '' || date === null) {
          return null;
        }
        if (withoutTime === void 0) {
          time = $(idDate + '-time').val();
          return api.tools.input2timeStamp(date, time);
        } else {
          return apit.tools.input2timeStamp(date);
        }
      };
      readFields = function(modalId) {
        var data, i, j, n, val, values;
        values = {};
        $(modalId + ' :input').each(function() {
          values[this.name] = $(this).val();
        });
        $(modalId + ' :input[type=checkbox]').each(function() {
          values[this.name] = $(this).prop('checked');
        });
        data = {
          name: values.rule_name,
          comments: values.rule_comments,
          frequency: values.rule_frequency,
          start: getDateTime('#id-rule-start'),
          end: getDateTime('#id-rule-end'),
          duration: parseInt(values.rule_duration),
          duration_unit: values.rule_duration_unit
        };
        if ($('#id-rule-freq').val() === 'WEEKDAYS') {
          n = 1;
          val = 0;
          for (i = j = 0; j <= 6; i = ++j) {
            if (values['wd_' + days[i]] === true) {
              val += n;
            }
            n <<= 1;
          }
          data.interval = val;
        } else {
          data.interval = parseInt(values.rule_interval);
        }
        return data;
      };
      updateSummary = function(modalId) {
        var $summary, data, dunit, interval, n, startDate, txt, units;
        $summary = $('#summary');
        data = readFields(modalId);
        txt = gettext("This rule will be valid every ");
        if (data.frequency === 'WEEKDAYS') {
          txt += getWeekDays(data.interval, true) + " " + gettext("of any week");
        } else {
          n = data.interval !== 1 ? 1 : 0;
          interval = n === 0 ? "" : data.interval;
          units = freqDct[data.frequency][n];
          txt += interval + " " + units;
        }
        startDate = new Date(data.start * 1000);
        txt += ", " + gettext("from") + " " + api.tools.strftime(dateFormat, startDate);
        if (data.end === null) {
          txt += " " + gettext("onwards");
        } else {
          txt += " " + gettext("until ") + api.tools.strftime(dateFormat, new Date(data.end * 1000));
        }
        txt += ", " + gettext("starting at") + " " + startDate.toTimeString().split(':').slice(0, 2).join(':') + " ";
        if (data.duration > 0) {
          dunit = dunitDct[data.duration_unit];
          txt += gettext("and will remain valid for " + data.duration + " " + dunit);
        } else {
          txt += gettext("with no duration");
        }
        return $summary.html(txt);
      };
      realFnc = function(value, refreshFnc) {
        return api.templates.get("calendar_rule", function(tmpl) {
          var $form, chk, content, i, j, key, modalId, n, now, val;
          content = api.templates.evaluate(tmpl, {
            freqs: (function() {
              var results;
              results = [];
              for (key in freqDct) {
                if (!hasProp.call(freqDct, key)) continue;
                val = freqDct[key];
                results.push({
                  id: key,
                  value: val[2]
                });
              }
              return results;
            })(),
            dunits: (function() {
              var results;
              results = [];
              for (key in dunitDct) {
                if (!hasProp.call(dunitDct, key)) continue;
                val = dunitDct[key];
                results.push({
                  id: key,
                  value: val
                });
              }
              return results;
            })(),
            days: days
          });
          modalId = gui.launchModal((value === null ? gettext("New rule") : gettext("Edit rule") + ' <b>' + value.name + '</b>'), content, {
            actionButton: "<button type=\"button\" class=\"btn btn-success button-accept\">" + gettext("Save") + "</button>"
          });
          $('#div-interval').show();
          $('#div-weekdays').hide();
          if (value !== null) {
            gui.doLog("Value: ", value);
            $('#id-rule-name').val(value.name);
            $('#id-rule-comments').val(value.comments);
            fillDateTime('#id-rule-start', value.start);
            fillDateTime('#id-rule-end', value.end);
            $('#id-rule-duration').val(value.duration);
            $('#id-rule-duration-unit').val(value.duration_unit);
            $('#id-rule-freq').val(value.frequency);
            if (value.frequency === 'WEEKDAYS') {
              $('#div-interval').hide();
              $('#div-weekdays').show();
              gui.doLog("Interval", value.interval);
              n = value.interval;
              for (i = j = 0; j <= 6; i = ++j) {
                if (n & 1 !== 0) {
                  chk = $('#rule-wd-' + days[i]);
                  chk.prop('checked', true);
                  chk.parent().addClass('active');
                }
                n >>= 1;
              }
            } else {
              $('#id-rule-interval-num').val(value.interval);
              n = parseInt($('#id-rule-interval-num').val()) !== 1 ? 1 : 0;
              $("#id-rule-interval-num").attr('data-postfix', freqDct[value.frequency][n]);
            }
          } else {
            now = Math.floor(new Date().getTime() / 1000);
            fillDateTime('#id-rule-start', now);
          }
          gui.tools.applyCustoms(modalId);
          updateSummary(modalId);
          $('#id-rule-freq').on('change', function() {
            var $this;
            $this = $(this);
            if ($this.val() === "WEEKDAYS") {
              $('#div-interval').hide();
              $('#div-weekdays').show();
            } else {
              $('#div-interval').show();
              $('#div-weekdays').hide();
            }
            n = parseInt($('#id-rule-interval-num').val()) !== 1 ? 1 : 0;
            $(modalId + ' .bootstrap-touchspin-postfix').html(freqDct[$this.val()][n]);
          });
          $('#id-rule-interval-num').on('change', function() {
            n = parseInt($('#id-rule-interval-num').val()) !== 1 ? 1 : 0;
            $(modalId + ' .bootstrap-touchspin-postfix').html(freqDct[$('#id-rule-freq').val()][n]);
          });
          $(modalId + ' input').on('change', function() {
            return updateSummary(modalId);
          });
          $(modalId + ' select').on('change', function() {
            return updateSummary(modalId);
          });
          $form = $(modalId + " form");
          $form.validate({
            debug: false,
            ignore: ':hidden:not("select"):not(".modal_field_data")',
            errorClass: "text-danger",
            validClass: "has-success",
            focusInvalid: true,
            highlight: function(element) {
              var group;
              group = $(element).closest(".form-group");
              group.addClass("has-error");
            },
            showErrors: function(errorMap, errorList) {
              return this.defaultShowErrors();
            },
            success: function(element) {
              $(element).closest(".form-group").removeClass("has-error");
              $(element).remove();
            }
          });
          return $(modalId + " .button-accept").click(function() {
            var closeAndRefresh, data;
            if (!$form.valid()) {
              return;
            }
            data = readFields(modalId);
            closeAndRefresh = function() {
              $(modalId).modal("hide");
              return refreshFnc();
            };
            if (value === null) {
              rules.rest.create(data, closeAndRefresh, gui.failRequestModalFnc(gettext('Error creating rule'), true));
            } else {
              data.id = value.id;
              rules.rest.save(data, closeAndRefresh, gui.failRequestModalFnc(gettext('Error saving rule'), true));
            }
            return gui.doLog(value, data);
          });
        });
      };
      if (forEdit === true) {
        return function(value, event, table, refreshFnc) {
          return realFnc(value, refreshFnc);
        };
      } else {
        return function(meth, table, refreshFnc) {
          return realFnc(null, refreshFnc);
        };
      }
    };
    return api.templates.get("calendars", function(tmpl) {
      gui.clearWorkspace();
      gui.appendToWorkspace(api.templates.evaluate(tmpl, {
        calendars: "calendars-placeholder",
        rules: "rules-placeholder"
      }));
      return gui.calendars.table({
        icon: 'calendars',
        container: "calendars-placeholder",
        rowSelect: "single",
        onRefresh: function(tbl) {
          clearRules();
        },
        onRowSelect: function(selected) {
          var id, rules;
          clearRules();
          $("#detail-placeholder").removeClass("hidden");
          id = selected[0].id;
          rules = new GuiElement(api.calendars.detail(id, "rules", {
            permission: selected[0].permission
          }), "rules");
          rulesTable = rules.table({
            icon: 'calendars',
            callback: renderer,
            container: "rules-placeholder",
            rowSelect: "multi",
            buttons: ["new", "edit", "delete", "xls"],
            onLoad: function(k) {},
            onNew: newEditFnc(rules, false),
            onEdit: newEditFnc(rules, true),
            onDelete: gui.methods.del(rules, gettext("Delete rule"), gettext("Rule deletion error"))
          });
        },
        onRowDeselect: function() {
          clearRules();
        },
        buttons: ["new", "edit", "delete", "xls", "permissions"],
        onNew: gui.methods.typedNew(gui.calendars, gettext("New calendar"), gettext("Calendar creation error")),
        onEdit: gui.methods.typedEdit(gui.calendars, gettext("Edit calendar"), gettext("Calendar saving error")),
        onDelete: gui.methods.del(gui.calendars, gettext("Delete calendar"), gettext("Calendar deletion error"))
      });
    });
  };

}).call(this);
