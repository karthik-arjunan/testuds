// Generated by CoffeeScript 1.12.7
(function() {
  var DefaultLocale, RequiredDateMethods, _strftime, dateToUTC, dayNames, hours12, initialsOf, localizedStrftime, monthNames, namespace, ordinal, pad, quacksLikeDate, strftime, strftimeTZ, strftimeUTC, weekNumber;

  (function(api, $, undefined_) {
    "use strict";
    api.tools = {
      base64: function(s) {
        return window.btoa(unescape(encodeURIComponent(s)));
      },
      input2timeStamp: function(inputDate, inputTime) {
        var tmp, v;
        if (inputDate === null || inputDate === void 0) {
          v = new Date(0);
        } else {
          tmp = inputDate.split('-');
          v = new Date(tmp[0], parseInt(tmp[1]) - 1, tmp[2]);
        }
        if (inputTime !== null && inputTime !== void 0) {
          tmp = inputTime.split(':');
          if (v.getTime() !== 0) {
            v.setHours(tmp[0]);
            v.setMinutes(tmp[1]);
          } else {
            return parseInt(tmp[0]) * 3600 + parseInt(tmp[1]) * 60;
          }
        }
        return v.getTime() / 1000;
      },
      strCut: function(str, maxLen) {
        var first, mid, remain, sl;
        if (maxLen < 3) {
          maxLen = 3;
        }
        sl = str.length;
        if (str.length > maxLen) {
          mid = Math.floor(maxLen / 2);
          first = mid - 1;
          remain = maxLen - mid - 2;
          return str = str.substr(0, first) + "..." + str.substr(sl - remain);
        }
      },
      capitalize: function(str) {
        str = str.toLowerCase();
        return str.substr(0, 1).toUpperCase() + str.substr(1);
        return str;
      },
      isEmpty: function(obj) {
        return $.isEmptyObject(obj);
      },
      random: function() {
        return Math.random().toString().split(".")[1];
      },
      cleanWhiteSpaces: function(str) {
        return str.split(' ').join('');
      }
    };
  })(window.api = window.api || {}, jQuery);

  initialsOf = function(arr) {
    var res, v;
    res = [];
    for (v in arr) {
      res.push(arr[v].substr(0, 3));
    }
    return res;
  };

  strftime = function(fmt, d, locale) {
    return _strftime(fmt, d, locale);
  };

  strftimeTZ = function(fmt, d, locale, timezone) {
    if (typeof locale === "number" && (timezone == null)) {
      timezone = locale;
      locale = null;
    }
    return _strftime(fmt, d, locale, {
      timezone: timezone
    });
  };

  strftimeUTC = function(fmt, d, locale) {
    return _strftime(fmt, d, locale, {
      utc: true
    });
  };

  localizedStrftime = function(locale) {
    return function(fmt, d, options) {
      return strftime(fmt, d, locale, options);
    };
  };

  _strftime = function(fmt, d, locale, options) {
    var timestamp;
    options = options || {};
    if (d && !quacksLikeDate(d)) {
      locale = d;
      d = null;
    }
    d = d || new Date();
    locale = locale || DefaultLocale;
    locale.formats = locale.formats || {};
    timestamp = d.getTime();
    if (options.utc || typeof options.timezone === "number") {
      d = dateToUTC(d);
    }
    if (typeof options.timezone === "number") {
      d = new Date(d.getTime() + (options.timezone * 60000));
    }
    return fmt.replace(/%([-_0]?.)/g, function(_, c) {
      var day, dayu, mod, off_, padding, tz, y, yy;
      mod = null;
      padding = null;
      if (c.length === 2) {
        mod = c[0];
        if (mod === "-") {
          padding = "";
        } else if (mod === "_") {
          padding = " ";
        } else if (mod === "0") {
          padding = "0";
        } else {
          return _;
        }
        c = c[1];
      }
      switch (c) {
        case "A":
          return locale.days[d.getDay()];
        case "a":
          return locale.shortDays[d.getDay()];
        case "B":
          return locale.months[d.getMonth()];
        case "b":
          return locale.shortMonths[d.getMonth()];
        case "C":
          return pad(Math.floor(d.getFullYear() / 100), padding);
        case "D":
          return _strftime(locale.formats.D || "%m/%d/%y", d, locale);
        case "d":
          return pad(d.getDate(), padding);
        case "e":
          return d.getDate();
        case "F":
          return _strftime(locale.formats.F || "%Y-%m-%d", d, locale);
        case "H":
          return pad(d.getHours(), padding);
        case "h":
          return locale.shortMonths[d.getMonth()];
        case "I":
          return pad(hours12(d), padding);
        case "j":
          y = new Date(d.getFullYear(), 0, 1);
          day = Math.ceil((d.getTime() - y.getTime()) / (1000 * 60 * 60 * 24));
          return pad(day, 3);
        case "k":
          return pad(d.getHours(), (padding === void 0 ? " " : padding));
        case "L":
          return pad(Math.floor(timestamp % 1000), 3);
        case "l":
          return pad(hours12(d), (padding === void 0 ? " " : padding));
        case "M":
          return pad(d.getMinutes(), padding);
        case "m":
          return pad(d.getMonth() + 1, padding);
        case "n":
          return "\n";
        case "o":
          return String(d.getDate()) + ordinal(d.getDate());
        case "P":
          return '';
        case "p":
          return '';
        case "R":
          return _strftime(locale.formats.R || "%H:%M", d, locale);
        case "r":
          return _strftime(locale.formats.r || "%I:%M:%S %p", d, locale);
        case "S":
          return pad(d.getSeconds(), padding);
        case "s":
          return Math.floor(timestamp / 1000);
        case "T":
          return _strftime(locale.formats.T || "%H:%M:%S", d, locale);
        case "t":
          return "\t";
        case "U":
          return pad(weekNumber(d, "sunday"), padding);
        case "u":
          dayu = d.getDay();
          if (dayu === 0) {
            return 7;
          } else {
            return dayu;
          }
        case "v":
          return _strftime(locale.formats.v || "%e-%b-%Y", d, locale);
        case "W":
          return pad(weekNumber(d, "monday"), padding);
        case "w":
          return d.getDay();
        case "Y":
          return d.getFullYear();
        case "y":
          yy = String(d.getFullYear());
          return yy.slice(yy.length - 2);
        case "Z":
          if (options.utc) {
            return "GMT";
          } else {
            tz = d.toString().match(/\((\w+)\)/);
            return tz && tz[1] || "";
          }
          break;
        case "z":
          if (options.utc) {
            return "+0000";
          } else {
            off_ = (typeof options.timezone === "number" ? options.timezone : -d.getTimezoneOffset());
            return (off_ < 0 ? "-" : "+") + pad(Math.abs(off_ / 60)) + pad(off_ % 60);
          }
          break;
        default:
          return c;
      }
    });
  };

  dateToUTC = function(d) {
    var msDelta;
    msDelta = (d.getTimezoneOffset() || 0) * 60000;
    return new Date(d.getTime() + msDelta);
  };

  quacksLikeDate = function(x) {
    var i, n;
    i = 0;
    n = RequiredDateMethods.length;
    i = 0;
    while (i < n) {
      if (typeof x[RequiredDateMethods[i]] !== "function") {
        return false;
      }
      ++i;
    }
    return true;
  };

  pad = function(n, padding, length) {
    var s;
    if (typeof padding === "number") {
      length = padding;
      padding = "0";
    }
    if (padding == null) {
      padding = "0";
    }
    if (length == null) {
      length = 2;
    }
    s = String(n);
    if (padding) {
      while (s.length < length) {
        s = padding + s;
      }
    }
    return s;
  };

  hours12 = function(d) {
    var hour;
    hour = d.getHours();
    if (hour === 0) {
      hour = 12;
    } else {
      if (hour > 12) {
        hour -= 12;
      }
    }
    return hour;
  };

  ordinal = function(n) {
    var i, ii;
    i = n % 10;
    ii = n % 100;
    if ((ii >= 11 && ii <= 13) || i === 0 || i >= 4) {
      return "th";
    }
    switch (i) {
      case 1:
        return "st";
      case 2:
        return "nd";
      case 3:
        return "rd";
    }
  };

  weekNumber = function(d, firstWeekday) {
    var firstDayOfYear, wday, weekNum, yday;
    firstWeekday = firstWeekday || "sunday";
    wday = d.getDay();
    if (firstWeekday === "monday") {
      if (wday === 0) {
        wday = 6;
      } else {
        wday--;
      }
    }
    firstDayOfYear = new Date(d.getFullYear(), 0, 1);
    yday = (d - firstDayOfYear) / 86400000;
    weekNum = (yday + 7 - wday) / 7;
    return Math.floor(weekNum);
  };

  "use strict";

  namespace = api.tools;

  dayNames = [gettext("Sunday"), gettext("Monday"), gettext("Tuesday"), gettext("Wednesday"), gettext("Thursday"), gettext("Friday"), gettext("Saturday")];

  monthNames = [gettext("January"), gettext("February"), gettext("March"), gettext("April"), gettext("May"), gettext("June"), gettext("July"), gettext("August"), gettext("September"), gettext("October"), gettext("November"), gettext("December")];

  DefaultLocale = {
    days: dayNames,
    shortDays: initialsOf(dayNames),
    months: monthNames,
    shortMonths: initialsOf(monthNames),
    AM: "AM",
    PM: "PM",
    am: "am",
    pm: "pm"
  };

  namespace.djangoFormat = function(format) {
    return format.replace(/./g, function(c) {
      switch (c) {
        case "a":
        case "A":
          return "%p";
        case "b":
        case "d":
        case "m":
        case "w":
        case "W":
        case "y":
        case "Y":
          return "%" + c;
        case "c":
          return "%FT%TZ";
        case "D":
          return "%a";
        case "e":
          return "%z";
        case "f":
          return "%I:%M";
        case "F":
          return "%F";
        case "h":
        case "g":
          return "%I";
        case "H":
        case "G":
          return "%H";
        case "i":
          return "%M";
        case "I":
          return "";
        case "j":
          return "%d";
        case "l":
          return "%A";
        case "L":
          return "";
        case "M":
          return "%b";
        case "n":
          return "%m";
        case "N":
          return "%b";
        case "o":
          return "%W";
        case "O":
          return "%z";
        case "P":
          return "%R %p";
        case "r":
          return "%a, %d %b %Y %T %z";
        case "s":
          return "%S";
        case "S":
          return "";
        case "t":
          return "";
        case "T":
          return "%Z";
        case "u":
          return "0";
        case "U":
          return "";
        case "z":
          return "%j";
        case "Z":
          return "z";
        default:
          return c;
      }
    });
  };

  namespace.strftime = strftime;

  namespace.strftimeTZ = strftime.strftimeTZ = strftimeTZ;

  namespace.strftimeUTC = strftime.strftimeUTC = strftimeUTC;

  namespace.localizedStrftime = strftime.localizedStrftime = localizedStrftime;

  RequiredDateMethods = ["getTime", "getTimezoneOffset", "getDay", "getDate", "getMonth", "getFullYear", "getYear", "getHours", "getMinutes", "getSeconds"];

  return;

}).call(this);
