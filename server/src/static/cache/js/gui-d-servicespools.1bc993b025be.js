// Generated by CoffeeScript 1.12.7
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  gui.servicesPools = new GuiElement(api.servicesPools, "servicespools");

  gui.servicesPools.fastLink = function(event, obj) {
    var $obj, vals;
    gui.doLog('FastLink clicked', obj);
    event.preventDefault();
    event.stopPropagation();
    $obj = $(obj);
    if ($obj.hasClass('goServiceLink')) {
      vals = $obj.attr('href').substr(1).split(',');
      gui.lookupUuid = vals[0];
      gui.lookup2Uuid = vals[1];
      return setTimeout(function() {
        return $(".lnk-service_providers").click();
      }, 50);
    } else if ($obj.hasClass('goPoolGroupLink')) {
      gui.lookupUuid = $obj.attr('href').substr(1);
      return setTimeout(function() {
        return $(".lnk-spoolsgroup").click();
      }, 50);
    } else if ($obj.hasClass('goAuthLink')) {
      vals = $obj.attr('href').substr(1).split(',');
      gui.lookupUuid = vals[0];
      gui.lookup2Uuid = vals[1];
      return setTimeout(function() {
        return $(".lnk-authenticators").click();
      }, 50);
    } else if ($obj.hasClass('goTransportLink')) {
      gui.lookupUuid = $obj.attr('href').substr(1);
      return setTimeout(function() {
        return $(".lnk-connectivity").click();
      }, 50);
    } else if ($obj.hasClass('goCalendarLink')) {
      gui.lookupUuid = $obj.attr('href').substr(1);
      return setTimeout(function() {
        return $(".lnk-calendars").click();
      }, 50);
    }
  };

  gui.servicesPools.link = function(event) {
    "use strict";
    var clearDetails, editDataLoaded, editMode, fillState, preFnc, prevTables, renderer, serviceChangedFnc;
    gui.clearWorkspace();
    editMode = false;
    prevTables = [];
    clearDetails = function() {
      $.each(prevTables, function(undefined_, tbl) {
        $(tbl).DataTable().destroy();
      });
      $("#assigned-services-placeholder_tbl").empty();
      $("#assigned-services-placeholder_log").empty();
      $("#cache-placeholder_tbl").empty();
      $("#cache-placeholder_log").empty();
      $("#transports-placeholder").empty();
      $("#groups-placeholder").empty();
      $("#access-placeholder").empty();
      $("#scheduling-placeholder").empty();
      $("#logs-placeholder").empty();
      $("#detail-placeholder").addClass("hidden");
      prevTables = [];
    };
    serviceChangedFnc = function(formId) {
      var $cacheFlds, $cacheL2Fld, $fld, $osmFld, $publishOnSaveFld, selectors;
      $fld = $(formId + " [name=\"service_id\"]");
      $osmFld = $(formId + " [name=\"osmanager_id\"]");
      selectors = [];
      $.each(["initial_srvs", "cache_l1_srvs", "cache_l2_srvs", "max_srvs"], function(index, value) {
        selectors.push(formId + " [name=\"" + value + "\"]");
      });
      $cacheFlds = $(selectors.join(","));
      $cacheL2Fld = $(formId + " [name=\"cache_l2_srvs\"]");
      $publishOnSaveFld = $(formId + " [name=\"publish_on_save\"]");
      if ($fld.val() !== -1) {
        api.providers.service($fld.val(), function(data) {
          var tmpVal;
          gui.doLog("Onchange", data);
          if (data.info.needs_manager === false) {
            $osmFld.prop("disabled", "disabled");
          } else {
            tmpVal = $osmFld.val();
            $osmFld.prop("disabled", false);
            api.osmanagers.overview(function(osm) {
              var d, i, j, len, len1, ref, st;
              $osmFld.empty();
              for (i = 0, len = osm.length; i < len; i++) {
                d = osm[i];
                ref = d.servicesTypes;
                for (j = 0, len1 = ref.length; j < len1; j++) {
                  st = ref[j];
                  if (indexOf.call(data.info.servicesTypeProvided, st) >= 0) {
                    $osmFld.append('<option value="' + d.id + '">' + d.name + '</option>');
                    break;
                  }
                }
              }
              $osmFld.val(tmpVal);
              if (editMode === true) {
                $osmFld.prop("disabled", "disabled");
              }
              if ($osmFld.hasClass("selectpicker")) {
                $osmFld.selectpicker("refresh");
              }
            });
          }
          if (data.info.uses_cache === false) {
            $cacheFlds.prop("disabled", "disabled");
          } else {
            $cacheFlds.prop("disabled", false);
            if (data.info.uses_cache_l2 === false) {
              $cacheL2Fld.prop("disabled", "disabled");
            } else {
              $cacheL2Fld.prop("disabled", false);
            }
          }
          gui.doLog("Needs publication?", data.info.needs_publication, $publishOnSaveFld);
          if ($publishOnSaveFld.bootstrapSwitch("readonly") === data.info.needs_publication) {
            $publishOnSaveFld.bootstrapSwitch("toggleReadonly", true);
          }
          if ($osmFld.hasClass("selectpicker")) {
            $osmFld.selectpicker("refresh");
          }
        });
        return;
      }
    };
    preFnc = function(formId) {
      var $fld;
      $fld = $(formId + " [name=\"service_id\"]");
      return $fld.on("change", function(event) {
        return serviceChangedFnc(formId);
      });
    };
    editDataLoaded = function(formId) {
      editMode = true;
      return serviceChangedFnc(formId);
    };
    fillState = function(data) {
      $.each(data, function(index, value) {
        value.origState = value.state;
        if (value.state === "U") {
          value.state = value.os_state !== "" && value.os_state !== "U" ? 'Z' : 'U';
        }
      });
    };
    renderer = function(fld, data, type, record) {
      if (fld === "show_transports" || fld === "visible") {
        if (data) {
          return gettext('Yes');
        }
        return gettext('No');
      }
      return fld;
    };
    api.templates.get("services_pool", function(tmpl) {
      var servicesPoolsTable;
      gui.appendToWorkspace(api.templates.evaluate(tmpl, {
        deployed_services: "deployed-services-placeholder",
        pool_info: "pool-info-placeholder",
        assigned_services: "assigned-services-placeholder",
        cache: "cache-placeholder",
        groups: "groups-placeholder",
        transports: "transports-placeholder",
        publications: "publications-placeholder",
        changelog: "changelog-placeholder",
        actions: "actions-placeholder",
        access: "access-placeholder",
        logs: "logs-placeholder"
      }));
      gui.setLinksEvents();
      $(".bottom_tabs").on("click", function(event) {
        gui.doLog(event.target);
        setTimeout((function() {
          $($(event.target).attr("href") + " span.fa-refresh").click();
        }), 10);
      });
      servicesPoolsTable = gui.servicesPools.table({
        icon: 'pools',
        callback: renderer,
        container: "deployed-services-placeholder",
        rowSelect: "multi",
        buttons: ["new", "edit", "delete", "xls", "permissions"],
        onRefresh: function() {
          clearDetails();
        },
        onRowDeselect: function(deselected, dtable) {
          gui.doLog("Selecteds: ", dtable.rows({
            selected: true
          }).length);
          if (dtable.rows({
            selected: true
          }).count() === 0) {
            clearDetails();
          }
        },
        onRowSelect: function(selected) {
          var assignedServices, assignedServicesTable, cachedItems, cachedItemsTable, clearAssignedLog, clearCacheLog, e, groups, groupsTable, i, info, j, k, l, len, len1, len2, len3, logTable, prevAssignedLogTbl, prevCacheLogTbl, ref, ref1, ref2, ref3, servPool, service, v;
          if (selected.length > 1) {
            clearDetails();
            return;
          }
          servPool = selected[0];
          gui.doLog("Selected services pool", servPool);
          clearDetails();
          service = null;
          try {
            info = servPool.info;
          } catch (error) {
            e = error;
            gui.doLog("Exception on rowSelect", e);
            gui.notify("Service pool " + gettext("error"), "danger");
            return;
          }
          $("#detail-placeholder").removeClass("hidden");
          $('#detail-placeholder a[href="#pool-info-placeholder"]').tab('show');
          gui.methods.typedShow(gui.servicesPools, selected[0], '#pool-info-placeholder .well', gettext('Error accessing data'));
          cachedItems = null;
          if (info.uses_cache || info.uses_cache_l2) {
            $("#cache-placeholder_tab").removeClass("hidden");
            cachedItems = new GuiElement(api.servicesPools.detail(servPool.id, "cache", {
              permission: servPool.permission
            }), "cache");
            prevCacheLogTbl = null;
            clearCacheLog = function(doHide) {
              var $tbl;
              if (prevCacheLogTbl) {
                $tbl = $(prevCacheLogTbl).dataTable();
                $tbl.fnClearTable();
                $tbl.fnDestroy();
                prevCacheLogTbl = null;
                if (doHide) {
                  return $('#cache-placeholder_log').empty();
                }
              }
            };
            cachedItemsTable = cachedItems.table({
              icon: 'cached',
              container: "cache-placeholder_tbl",
              rowSelect: "multi",
              deferRender: true,
              doNotLoadData: true,
              buttons: ["delete", "xls"],
              onData: function(data) {
                fillState(data);
              },
              onRefresh: function() {
                clearCacheLog(true);
              },
              onRowDeselect: function(deselected, dtable) {
                return clearCacheLog(true);
              },
              onRowSelect: function(selected) {
                var cached;
                cached = selected[0];
                clearCacheLog(false);
                prevCacheLogTbl = cachedItems.logTable(cached.id, {
                  container: "cache-placeholder_log"
                });
              },
              onDelete: gui.methods.del(cachedItems, gettext("Remove Cache element"), gettext("Deletion error"))
            });
            prevTables.push(cachedItemsTable);
          } else {
            $("#cache-placeholder_tab").addClass("hidden");
          }
          groups = null;
          if (info.must_assign_manually === false) {
            $("#groups-placeholder_tab").removeClass("hidden");
            groups = new GuiElement(api.servicesPools.detail(servPool.id, "groups", {
              permission: servPool.permission
            }), "groups");
            groupsTable = groups.table({
              doNotLoadData: true,
              icon: 'groups',
              container: "groups-placeholder",
              rowSelect: "multi",
              buttons: ["new", "delete", "xls"],
              onNew: function(value, table, refreshFnc) {
                api.templates.get("pool_add_group", function(tmpl) {
                  api.authenticators.overview(function(data) {
                    var modalId;
                    modalId = gui.launchModal(gettext("Add group"), api.templates.evaluate(tmpl, {
                      auths: data
                    }));
                    $(modalId + " #id_auth_select").on("change", function(event) {
                      var auth;
                      auth = $(modalId + " #id_auth_select").val();
                      api.authenticators.detail(auth, "groups").overview(function(data) {
                        var $select, maxCL;
                        $select = $(modalId + " #id_group_select");
                        $select.empty();
                        maxCL = 32;
                        $.each(data, function(undefined_, value) {
                          $select.append("<option value=\"" + value.id + "\">" + value.name + " (" + value.comments.substr(0, maxCL - 1) + (value.comments.length > maxCL ? "&hellip;" : "") + ")</option>");
                        });
                        if ($select.hasClass("selectpicker")) {
                          $select.selectpicker("refresh");
                        }
                      });
                    });
                    $(modalId + " .button-accept").on("click", function(event) {
                      var auth, group;
                      auth = $(modalId + " #id_auth_select").val();
                      group = $(modalId + " #id_group_select").val();
                      if (auth === -1 || group === -1) {
                        gui.notify(gettext("You must provide authenticator and group"), "danger");
                      } else {
                        groups.rest.create({
                          id: group
                        }, function(data) {
                          $(modalId).modal("hide");
                          refreshFnc();
                        });
                      }
                    });
                    gui.tools.applyCustoms(modalId);
                  });
                });
              },
              onData: function(data) {
                $.each(data, function(undefined_, value) {
                  value.group_name = gui.fastLink(value.name + "<span class='text-danger'>@</span>" + value.auth_name, value.auth_id + ",g" + value.id, 'gui.servicesPools.fastLink', 'goAuthLink');
                });
              },
              onDelete: gui.methods.del(groups, gettext("Remove group"), gettext("Group removal error"))
            });
            prevTables.push(groupsTable);
          } else {
            $("#groups-placeholder_tab").addClass("hidden");
          }
          prevAssignedLogTbl = null;
          clearAssignedLog = function(doHide) {
            var $tbl;
            if (prevAssignedLogTbl) {
              $tbl = $(prevAssignedLogTbl).dataTable();
              $tbl.fnClearTable();
              $tbl.fnDestroy();
              prevAssignedLogTbl = null;
              if (doHide) {
                return $("#assigned-services-placeholder_log").empty();
              }
            }
          };
          assignedServices = new GuiElement(api.servicesPools.detail(servPool.id, "services", {
            permission: servPool.permission
          }), "services");
          assignedServicesTable = assignedServices.table({
            doNotLoadData: true,
            icon: 'assigned',
            container: "assigned-services-placeholder_tbl",
            rowSelect: "multi",
            buttons: (info.must_assign_manually ? ["new", "delete", "xls"] : ["delete", "xls"]),
            onData: function(data) {
              fillState(data);
              $.each(data, function(index, value) {
                if (value.in_use === true) {
                  value.in_use = gettext('Yes');
                } else {
                  value.in_use = gettext('No');
                }
                return value.owner = gui.fastLink(value.owner.replace(/@/, '<span class="text-danger">@</span>', value.owner_info.auth_id + ",u" + value.owner_info.user_id, 'gui.servicesPools.fastLink', 'goAuthLink'));
              });
            },
            onRefresh: function() {
              clearAssignedLog(true);
            },
            onRowDeselect: function(deselected, dtable) {
              return clearAssignedLog(true);
            },
            onRowSelect: function(selected) {
              var svr;
              svr = selected[0];
              clearAssignedLog(false);
              prevAssignedLogTbl = assignedServices.logTable(svr.id, {
                container: "assigned-services-placeholder_log"
              });
            },
            onDelete: gui.methods.del(assignedServices, gettext("Remove Assigned service"), gettext("Deletion error"))
          });
          prevTables.push(assignedServicesTable);
          ref = gui.servicesPools.transports(servPool, info);
          for (i = 0, len = ref.length; i < len; i++) {
            v = ref[i];
            prevTables.push(v);
          }
          if (info.needs_publication) {
            $("#publications-placeholder_tab").removeClass("hidden");
            ref1 = gui.servicesPools.publications(servPool, info);
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              v = ref1[j];
              prevTables.push(v);
            }
          } else {
            $("#publications-placeholder_tab").addClass("hidden");
          }
          ref2 = gui.servicesPools.actionsCalendars(servPool, info);
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            v = ref2[k];
            prevTables.push(v);
          }
          ref3 = gui.servicesPools.accessCalendars(servPool, info);
          for (l = 0, len3 = ref3.length; l < len3; l++) {
            v = ref3[l];
            prevTables.push(v);
          }
          logTable = gui.servicesPools.logTable(servPool.id, {
            doNotLoadData: true,
            container: "logs-placeholder"
          });
          prevTables.push(logTable);
        },
        onData: function(data) {
          gui.doLog("onData for services pools", data);
          $.each(data, function(index, value) {
            var e, style, style_grp;
            try {
              style = "display:inline-block; background: url(data:image/png;base64," + value.thumb + "); background-size: 16px 16px; background-repeat: no-repeat; width: 16px; height: 16px; vertical-align: middle;";
              style_grp = "display:inline-block; background: url(data:image/png;base64," + value.pool_group_thumb + "); background-size: 16px 16px; background-repeat: no-repeat; width: 16px; height: 16px; vertical-align: middle;";
              value.parent = gui.fastLink(value.parent, value.provider_id + "," + value.service_id, 'gui.servicesPools.fastLink', 'goServiceLink');
              value.pool_group_name = "<span style='" + style_grp + "'></span> " + value.pool_group_name;
              if (value.pool_group_id != null) {
                value.pool_group_name = gui.fastLink(value.pool_group_name, value.pool_group_id, 'gui.servicesPools.fastLink', 'goPoolGroupLink');
              }
              if (value.restrained) {
                value.name = "<span class=\"fa fa-exclamation text-danger\"></span> " + value.name;
                value.state = gettext("Restrained");
              }
              value.name = "<span style=\"" + style + "\"></span> " + value.name;
            } catch (error) {
              e = error;
              value.name = "<span class=\"fa fa-asterisk text-alert\"></span> " + value.name;
            }
          });
        },
        onNew: gui.methods.typedNew(gui.servicesPools, gettext("New service pool"), "Service pool " + gettext("creation error"), {
          guiProcessor: function(guiDef) {
            var newDef;
            editMode = false;
            gui.doLog(guiDef);
            newDef = [].concat(guiDef).concat([
              {
                name: "publish_on_save",
                value: true,
                gui: {
                  label: gettext("Publish on creation"),
                  tooltip: gettext("If selected, will initiate the publication inmediatly after creation"),
                  type: "checkbox",
                  order: 150,
                  defvalue: true
                }
              }
            ]);
            gui.doLog(newDef);
            return newDef;
          },
          preprocessor: preFnc
        }),
        onEdit: gui.methods.typedEdit(gui.servicesPools, gettext("Edit") + " service pool", "Service pool " + gettext("saving error"), {
          preprocessor: editDataLoaded
        }),
        onDelete: gui.methods.del(gui.servicesPools, gettext("Delete") + " service pool", "Service pool " + gettext("deletion error"))
      });
    });
  };

}).call(this);
