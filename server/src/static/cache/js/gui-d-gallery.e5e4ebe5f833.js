// Generated by CoffeeScript 1.12.7
(function() {
  gui.gallery = new GuiElement(api.gallery, "imgal");

  gui.gallery.link = function() {
    "use strict";
    var newEditImageFnc;
    if (api.config.admin === false) {
      return;
    }
    newEditImageFnc = function(forEdit) {
      var realFnc;
      realFnc = function(value, refreshFnc) {
        return api.templates.get("new_image", function(tmpl) {
          var content, modalId;
          content = api.templates.evaluate(tmpl);
          modalId = gui.launchModal((value === null ? gettext("New image") : gettext("Edit image")), content, {
            actionButton: "<button type=\"button\" class=\"btn btn-success button-accept\">" + gettext("Upload") + "</button>"
          });
          gui.tools.applyCustoms(modalId);
          value === null || $("#id_image_name").val(value.name);
          return $(modalId + " .button-accept").click(function() {
            var file, name, reader;
            file = $('#id-image_for_gallery')[0].files[0];
            if (file === null) {
              gui.notify(gettext("You must select an image"));
              return;
            }
            name = $('#id_image_name').val();
            if (name === "") {
              name = file.name;
            }
            if (file.size > 256 * 1024) {
              gui.notify(gettext("Image is too big (max. upload size is 256Kb)"));
              returng;
            }
            $(modalId).modal("hide");
            reader = new FileReader();
            reader.onload = function(res) {
              var data, img;
              img = res.target.result;
              img = img.substr(img.indexOf("base64,") + 7);
              data = {
                data: img,
                name: name
              };
              if (value === null) {
                return api.gallery.create(data, refreshFnc);
              } else {
                data.id = value.id;
                return api.gallery.save(data, refreshFnc);
              }
            };
            return reader.readAsDataURL(file);
          });
        });
      };
      if (forEdit === true) {
        return function(value, event, table, refreshFnc) {
          return realFnc(value, refreshFnc);
        };
      } else {
        return function(meth, table, refreshFnc) {
          return realFnc(null, refreshFnc);
        };
      }
    };
    api.templates.get("gallery", function(tmpl) {
      gui.clearWorkspace();
      gui.appendToWorkspace(api.templates.evaluate(tmpl, {
        gallery: "gallery-placeholder"
      }));
      gui.gallery.table({
        icon: 'gallery',
        container: "gallery-placeholder",
        rowSelect: "single",
        buttons: ["new", "edit", "delete"],
        onNew: newEditImageFnc(false),
        onEdit: newEditImageFnc(true),
        onDelete: gui.methods.del(gui.gallery, gettext("Delete Image"), gettext("Image deletion error"))
      });
    });
  };

}).call(this);
