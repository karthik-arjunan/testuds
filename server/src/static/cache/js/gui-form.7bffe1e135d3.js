// Generated by CoffeeScript 1.12.7
(function() {
  (function(gui, $, undefined_) {
    "use strict";
    gui.forms = {};
    gui.forms.callback = function(formSelector, method, params, success_fnc) {
      var p, path;
      path = "gui/callback/" + method;
      p = [];
      $.each(params, function(index, val) {
        p.push(val.name + "=" + encodeURIComponent(val.value));
      });
      path = path + "?" + p.join("&");
      api.getJson(path, {
        success: success_fnc
      });
    };
    gui.forms.fieldsToHtml = function(itemGui, item, editing) {
      var fillers, html, index, originalValues;
      html = "";
      fillers = [];
      originalValues = {};
      index = 0;
      $.each(itemGui, function(index, f) {
        var id, newValue, value;
        index = index + 1;
        gui.doLog("Processing ", f);
        if (f.gui == null) {
          return;
        }
        if (f.gui.type === "text" && f.gui.multiline) {
          f.gui.type = "textbox";
        }
        value = item[f.name];
        if (value == null) {
          gui.doLog("Value is null");
          value = f.gui.value || f.gui.defvalue;
        }
        if (f.gui.type === "multichoice") {
          newValue = [];
          $.each(value, function(undefined_, val) {
            newValue.push(val.id);
          });
          value = newValue;
        }
        id = "uniq" + Math.random().toString().split(".")[1];
        originalValues[f.name] = value;
        html += api.templates.evaluate("tmpl_fld_" + f.gui.type, {
          index: index,
          id: id,
          value: value,
          minValue: f.gui.minValue,
          maxValue: f.gui.maxValue,
          values: f.gui.values,
          label: f.gui.label,
          length: f.gui.length,
          multiline: f.gui.multiline,
          readonly: (editing === true ? f.gui.rdonly : editing === "readonly" ? true : false),
          required: f.gui.required,
          tooltip: f.gui.tooltip,
          type: f.gui.type,
          name: f.name + (editing === "readonly" ? '__' : ''),
          css: "modal_field_data"
        });
        if (f.gui.fills) {
          gui.doLog("This field has a filler");
          fillers.push({
            name: f.name,
            callbackName: f.gui.fills.callbackName,
            parameters: f.gui.fills.parameters
          });
        }
      });
      return {
        html: html,
        fillers: fillers,
        originalValues: originalValues
      };
    };
    gui.forms.fromFields = function(fields, item, forShow) {
      var active, editing, fillers, form, h, id, init, j, k, len, originalValues, tab, tabs, tabsArray, tabsContent;
      editing = item != null;
      item = item || {
        id: ""
      };
      form = "<form class=\"form-horizontal\" role=\"form\">" + "<input type=\"hidden\" name=\"id\" class=\"modal_field_data\" value=\"" + item.id + "\">";
      fillers = [];
      originalValues = {};
      tabsArray = [];
      if ((fields.tabs == null) && (forShow == null)) {
        tabs = {};
        for (j = 0, len = fields.length; j < len; j++) {
          k = fields[j];
          if (k.gui.tab == null) {
            k.gui.tab = gettext('Main');
          }
          tab = k.gui.tab;
          if (tabs[tab] != null) {
            tabs[tab].fields.push(k);
          } else {
            tabs[tab] = {
              title: tab,
              fields: [k]
            };
            tabsArray.push(tabs[tab]);
          }
        }
        gui.doLog("Tabs ", tabsArray, tabsArray.length);
      }
      if (tabsArray.length > 1) {
        fields.tabs = tabsArray;
      }
      if (fields.tabs != null) {
        id = "tab-" + Math.random().toString().split(".")[1];
        tabs = [];
        tabsContent = [];
        active = " active in";
        $.each(fields.tabs, function(index, tab) {
          var h;
          h = gui.forms.fieldsToHtml(tab.fields, item, editing);
          tabsContent.push("<div class=\"tab-pane fade" + active + "\" id=\"" + id + index + "\">" + h.html + "</div>");
          tabs.push("<li class='" + active + "'><a href=\"#" + id + index + "\" data-toggle=\"tab\">" + tab.title + "</a></li>");
          active = "";
          fillers = fillers.concat(h.fillers);
          $.extend(originalValues, h.originalValues);
          gui.doLog("Fillers:", h.fillers);
        });
        form += "<ul class=\"nav nav-tabs\">" + tabs.join("\n") + "</ul><div class=\"tab-content\">" + tabsContent.join("\n") + "</div>";
      } else {
        h = gui.forms.fieldsToHtml(fields, item, forShow != null ? "readonly" : editing);
        form += h.html;
        fillers = fillers.concat(h.fillers);
        $.extend(originalValues, h.originalValues);
      }
      form += "</form>";
      gui.doLog("Original values: ", originalValues);
      init = function(formSelector) {
        var onChange;
        gui.doLog(formSelector, fillers);
        onChange = function(filler) {
          return function() {
            var params;
            gui.doLog("Onchange invoked for ", filler);
            params = [];
            $.each(filler.parameters, function(undefined_, p) {
              var val;
              val = $(formSelector + " [name=\"" + p + "\"]").val();
              params.push({
                name: p,
                value: val
              });
            });
            gui.forms.callback(formSelector, filler.callbackName, params, function(data) {
              $.each(data, function(undefined_, sel) {
                var $select;
                $select = $(formSelector + " [name=\"" + sel.name + "\"]");
                $select.empty();
                $.each(sel.values, function(undefined_, value) {
                  $select.append("<option value=\"" + value.id + "\">" + value.text + "</option>");
                });
                $select.val(originalValues[sel.name]);
                if ($select.hasClass("selectpicker")) {
                  $select.selectpicker("refresh");
                }
                $select.trigger("change");
              });
            });
          };
        };
        $.each(fillers, function(undefined_, f) {
          $(formSelector + " [name=\"" + f.name + "\"]").on("change", onChange(f));
        });
        if (fillers.length) {
          $(formSelector + " [name=\"" + fillers[0].name + "\"]").trigger("change");
        }
      };
      return {
        html: form,
        init: init
      };
    };
    gui.forms.read = function(formSelector) {
      var res;
      res = {};
      $(formSelector + " .modal_field_data").each(function(i, field) {
        var $field, name;
        $field = $(field);
        if ($field.attr("name")) {
          name = $field.attr("name");
          if ($field.attr("type") === "checkbox") {
            res[name] = $field.is(":checked");
          } else if ($field.attr("data-uds") === "list") {
            res[name] = $field.val().split('/**/');
          } else if ($field.attr("data-uds") === "commaList") {
            res[name] = $field.val().split(',');
          } else {
            res[name] = $field.val();
            if ((res[name] == null) && $field.is("select")) {
              res[name] = [];
            }
          }
        }
      });
      gui.doLog(res);
      return res;
    };
    gui.forms.launchModal = function(options, onSuccess) {
      var $form, clickEventHandlers, closeFnc, ff, firstErrorTab, footer, formSelector, id, j, len, ref, s;
      options = options || {};
      gui.doLog(options);
      id = "modal-" + api.tools.random();
      ff = gui.forms.fromFields(options.fields, options.item);
      footer = "";
      clickEventHandlers = [];
      if (options.buttons) {
        $.each(options.buttons, function(index, value) {
          var _id, css;
          _id = id + "-footer-" + index;
          css = value.css || "btn-default";
          clickEventHandlers.push({
            id: "#" + _id,
            action: value.action
          });
          footer += "<button id=\"" + _id + "\" type=\"button\" class=\"pull-left btn " + css + "\">" + value.text + "</button>";
        });
      }
      gui.appendToWorkspace(gui.modal(id, options.title, ff.html, {
        footer: footer,
        actionButton: options.actionButton
      }));
      id = "#" + id;
      formSelector = id + " form";
      closeFnc = function() {
        $(id).modal("hide");
      };
      if (ff.init) {
        ff.init(id);
      }
      $.each(clickEventHandlers, function(undefined_, value) {
        if (value.action != null) {
          $(value.id).on("click", function(event) {
            value.action(event, formSelector, closeFnc);
          });
        }
      });
      $form = $(id + " form");
      gui.tools.applyCustoms(id);
      firstErrorTab = null;
      $form.validate({
        debug: false,
        ignore: ':hidden:not("select"):not(".modal_field_data")',
        errorClass: "text-danger",
        validClass: "has-success",
        focusInvalid: true,
        highlight: function(element) {
          var group;
          group = $(element).closest(".form-group");
          group.addClass("has-error");
          if (firstErrorTab === null && group.parent().hasClass('tab-pane')) {
            firstErrorTab = $("a[href='#" + group.parent().attr('id') + "']");
            firstErrorTab.tab('show');
          }
        },
        showErrors: function(errorMap, errorList) {
          firstErrorTab = null;
          return this.defaultShowErrors();
        },
        success: function(element) {
          $(element).closest(".form-group").removeClass("has-error");
          $(element).remove();
        }
      });
      ref = $($form.selector + " select[multiple][required]");
      for (j = 0, len = ref.length; j < len; j++) {
        s = ref[j];
        gui.doLog("Rules ", $(s).rules());
      }
      $(id + " .button-accept").click(function() {
        if (!$form.valid()) {
          return;
        }
        if (options.success) {
          options.success(formSelector, closeFnc);
          return;
        } else {
          closeFnc();
        }
      });
      if (options.preprocessor) {
        options.preprocessor(id);
      }
      $(id).modal({
        keyboard: false
      }).on("hidden.bs.modal", function() {
        $(id).remove();
      });
    };
    gui.forms.confirmModal = function(title, question, options) {
      var modalId, onNo, onYes;
      options = options || {};
      options.actionButton = "<button type=\"button\" class=\"btn btn-primary button-yes\">" + (options.yesButton || gettext("yes")) + "</button>";
      options.closeButton = "<button type=\"button\" class=\"btn btn-danger button-no\">" + (options.noButton || gettext("no")) + "</button>";
      onYes = options.onYes || function() {};
      onNo = options.onNo || function() {};
      modalId = gui.launchModal(title, question, options);
      $(modalId + " .button-yes").on("click", function(event) {
        $(modalId).modal("hide");
        onYes();
      });
      $(modalId + " .button-no").on("click", function(event) {
        $(modalId).modal("hide");
        onNo();
      });
    };
    gui.forms.promptModal = function(title, message, options) {
      var html, modalId, onAccept, onClose, textField;
      options = options || {};
      options.actionButton = "<button type=\"button\" class=\"btn btn-primary button-yes\">" + (options.acceptButton || gettext("Accept")) + "</button>";
      options.closeButton = "<button type=\"button\" class=\"btn btn-danger button-no\">" + (options.closeButton || gettext("Close")) + "</button>";
      onAccept = options.onAccept || function() {};
      onClose = options.onClose || function() {};
      html = '<div class="row"><div class="col-sm-12">' + message + '</div></div><div class="row"><div class="col-sm-12"><input class="form-control" type="text" name="text" autofocus></div></div>';
      modalId = gui.launchModal(title, html, options);
      textField = $(modalId + ' input[name="text"]');
      setTimeout(function() {
        return textField.focus();
      }, 100);
      $(modalId + " .button-yes").on("click", function(event) {
        var text;
        text = textField.val();
        $(modalId).modal("hide");
        onAccept(text);
      });
      $(modalId + " .button-no").on("click", function(event) {
        $(modalId).modal("hide");
        onClose();
      });
      gui.doLog("***** Datos ", modalId, textField);
    };
    gui.forms.guiField = function(name, type, label, tooltip, value, values, length, multiline, readonly, required) {
      length = length || 128;
      multiline = multiline != null ? multiline : 0;
      readonly = readonly || false;
      required = required || false;
      return {
        name: name,
        gui: {
          defvalue: value,
          value: value,
          values: values,
          label: label,
          length: length,
          multiline: multiline,
          rdonly: readonly,
          required: required,
          tooltip: tooltip,
          type: type
        }
      };
    };
  })(window.gui = window.gui || {}, jQuery);

}).call(this);
